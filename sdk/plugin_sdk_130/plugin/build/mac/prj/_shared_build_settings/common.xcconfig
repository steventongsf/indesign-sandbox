
// Common InDesign build settings shared between all projects, targets and configurations
ID_BUILD_CONFIG_COMMON = YES
// SDK and minimum deployment target
SDKROOT = macosx
MACOSX_DEPLOYMENT_TARGET = 10.12
MACOSX_SDKVERSION = 101300	// use to compare SDK version against constants in AvailabilityMacros.h

ARCHS = x86_64
VALID_ARCHS = x86_64 // farewell to ppc builds
GCC_INPUT_FILETYPE = sourcecode.cpp.cpp

// Compiler version (4.0 vs 4.2 vs com.apple.compilers.llvmgcc42)
GCC_VERSION = com.apple.compilers.llvm.clang.1_0
CLANG_CXX_LIBRARY = libc++ // as opposed to the legacy libstdc++
CLANG_CXX_LANGUAGE_STANDARD = gnu++14 // GNU C++ 11
ALWAYS_SEARCH_USER_PATHS = NO
BUILD_TEMPFOLDER_NAME = build

SYMROOT = $(PROJECT_DIR)/$(BUILD_TEMPFOLDER_NAME)
OBJROOT = $(PROJECT_DIR)/$(BUILD_TEMPFOLDER_NAME)

// Debug symbol format (dwarf vs dwarf-with-dsym vs stabs)
DEBUG_INFORMATION_FORMAT = dwarf-with-dsym
SEPARATE_STRIP = NO
DEPLOYMENT_POSTPROCESSING = YES
STRIP_STYLE = non-global

// InDesign Build variables
ID_APPLICATION_TYPE = "APPL"
ID_CREATOR = "InDn"
IC_CREATOR = "InCp"
ID_PLUGIN_OPTIONAL_TYPE = "InDa"
ID_PLUGIN_REQUIRED_TYPE = "InDr"
ID_PLUGIN_SDK_TYPE = "InD3"

// InDesign Build paths
//ID_BUILDFOLDER_SUBPATH = $(TARGET_NAME)				//Overridden to use a build package somewhere other than build/mac/$(TARGET_NAME).
BUILD_TEMPFOLDER_NAME = build
SYMROOT = $(PROJECT_DIR)/$(BUILD_TEMPFOLDER_NAME)
OBJROOT = $(PROJECT_DIR)/$(BUILD_TEMPFOLDER_NAME)

ID_PRJ_DIR = $(SRCROOT)
ID_BUILDFOLDER_RELPATH = ../$(ID_BUILDFOLDER_SUBPATH)	// Rel path from prj to the target/config specific build folder i.e. .../build/mac/debug
ID_DIR = $(ID_PRJ_DIR)/$(ID_BUILDFOLDER_RELPATH)		// Path to the target/config specific build folder i.e. .../build/mac/debug
ID_BUILDFOLDER_ABSPATH = $(ID_DIR)						// Abs path from prj to the target/config specific build folder i.e. .../build/mac/debug

// The following vars must contain absolute paths
ID_PACKAGE_DIR = $(ID_PRJ_DIR)/../packages/$(ID_BUILDFOLDER_SUBPATH)
ID_PLUGINS_DIR = $(ID_BUILDFOLDER_ABSPATH)/packagefolder/contents/macos/plug-ins
ID_REQUIRED_DIR = $(ID_BUILDFOLDER_ABSPATH)/packagefolder/contents/macos/required
ID_TESTING_DIR = $(ID_BUILDFOLDER_ABSPATH)/packagefolder/contents/macos/testing
ID_BUILT_SDK_SAMPLES_DIR = $(ID_BUILDFOLDER_ABSPATH)/SDK
ID_FUTURE_VERSION_DIR = $(ID_BUILDFOLDER_ABSPATH)/packagefolder/contents/macos/future version
ID_TOOLS_DIR = $(ID_BUILDFOLDER_ABSPATH)/tools

ID_SDK_ROOT = ../../..
CONFIGURATION_BUILD_DIR = $(BUILT_PRODUCTS_DIR)

ID_PRECOMPILE_TYPE = ID_MODEL_PRECOMPILE									// either ID_MODEL_PRECOMPILE or ID_UI_PRECOMPILE
ID_PRECOMPILE_FOLDERNAME = SharedPrecompiledHeaders						// this may need to vary with Model vs UI projects
ID_SHARED_PRECOMPS_ROOT = $(SYMROOT)/$(ID_PRECOMPILE_FOLDERNAME)
SHARED_PRECOMPS_DIR = $(ID_SHARED_PRECOMPS_ROOT)/$(ID_BUILDFOLDER_SUBPATH)

// Set up Library and Framework search paths (these can be prj relative)
ID_DYLIBS_RELDIR = $(ID_BUILDFOLDER_RELPATH)/packagefolder/contents/macos
ID_STATICLIBS_RELDIR = $(ID_BUILDFOLDER_RELPATH)/packagefolder/contents/macos/libs
ID_FRAMEWORKS_RELDIR = $(ID_BUILDFOLDER_RELPATH)/packagefolder/contents/Frameworks

LD_RUNPATH_SEARCH_PATHS = $(LD_RUNPATH_SEARCH_PATHS) @executable_path/../Frameworks
FRAMEWORK_SEARCH_PATHS = $(FRAMEWORK_SEARCH_PATHS) $(ID_FRAMEWORKS_RELDIR) $(ID_DYLIBS_RELDIR) "$(SDKROOT)/System/Library/Frameworks"
LIBRARY_SEARCH_PATHS = $(LIBRARY_SEARCH_PATHS) $(ID_DYLIBS_RELDIR) $(ID_STATICLIBS_RELDIR) $(ID_FRAMEWORKS_RELDIR)

// Common include paths macros for use in any InDesign projects, including Open and SDK projects.
// Just the OS headers
OS_HEADER_SEARCH_PATHS = $(SDKROOT)/System/Library/Frameworks/

// Public headers - this list is based on what was in base and plugin
//  which means that the public/interfaces paths needed are actually in the project files.
// During the drover transition we add a few non public include file locations.
ID_TEMPORARILY_PUBLIC_HEADER_SEARCH_PATHS = 
ID_PUBLIC_HEADER_SEARCH_PATHS = $(ID_SDK_ROOT)/source/precomp/common $(ID_SDK_ROOT)/source/precomp/msvc $(ID_SDK_ROOT)/source/precomp/gcc $(ID_SDK_ROOT)/source/public/includes  $(ID_SDK_ROOT)/source/public/interfaces/architecture $(ID_SDK_ROOT)/source/public/interfaces/graphics $(ID_SDK_ROOT)/source/public/interfaces/layout $(ID_SDK_ROOT)/source/public/interfaces/ui $(ID_SDK_ROOT)/source/public/interfaces/text $(ID_SDK_ROOT)/source/public/interfaces/utils $(ID_SDK_ROOT)/source/public/interfaces/xmedia $(ID_SDK_ROOT)/source/public/libs/widgetbin/includes $(ID_TEMPORARILY_PUBLIC_HEADER_SEARCH_PATHS)

// Wildcarded Public interfaces. 
// Less efficient, but header path maintenance in our project files is a chore.
// Unfortunately, if I use this list but don't edit all the 
// project files to remove the duplicates it slows the debug build down by about 14%. 
// I think we'd get most of that back after editing the projects, but I'm not ready to do that yet.
ID_ALLPUBLIC_HEADER_SEARCH_PATHS = $(ID_SDK_ROOT)/source/precomp/common $(ID_SDK_ROOT)/source/precomp/msvc $(ID_SDK_ROOT)/source/precomp/gcc $(ID_SDK_ROOT)/source/public/includes $(ID_SDK_ROOT)/source/public/interfaces/** $(ID_SDK_ROOT)/source/public/libs/widgetbin/includes

// Open headers
// Use the wildcard here, since base was already doing that, and plugins might as well have been
ID_OPEN_HEADER_SEARCH_PATHS = $(ID_SDK_ROOT)/source/open/includes/** $(ID_SDK_ROOT)/source/open/interfaces/** 

// External root path
ADOBELIB_ROOT_SEARCH_PATH = $(ID_SDK_ROOT)/external

// Adobe Source Libraries/Boost headers
ASL_HEADER_ROOT_SEARCH_PATH = $(ADOBELIB_ROOT_SEARCH_PATH)/dva/third_party

BOOST_HEADER_SEARCH_PATH = $(ASL_HEADER_ROOT_SEARCH_PATH)/boost_libraries/
TBB_HEADER_SEARCH_PATH	 = $(ASL_HEADER_ROOT_SEARCH_PATH)/intel_tbb_libraries/mac/tbb/include
ASL_HEADER_SEARCH_PATH   = $(ASL_HEADER_ROOT_SEARCH_PATH)/adobe_source_libraries/

ASL_HEADER_SEARCH_PATHS  = $(BOOST_HEADER_SEARCH_PATH) $(TBB_HEADER_SEARCH_PATH) $(ASL_HEADER_SEARCH_PATH)

// Adobe Platform Libraries
APL_HEADER_SEARCH_PATHS   = $(ASL_HEADER_ROOT_SEARCH_PATH)/adobe_platform_libraries $(ASL_HEADER_ROOT_SEARCH_PATH)/adobe_platform_libraries/macintosh

// DVA headers
DVA_HEADER_SEARCH_PATHS = $(ADOBELIB_ROOT_SEARCH_PATH)/dva/adobe $(ADOBELIB_ROOT_SEARCH_PATH)/dva/adobe/dvacore/sys/mac-xcode

// APE headers
APE_HEADER_SEARCH_PATHS = $(ADOBELIB_ROOT_SEARCH_PATH)/dva/adobe/ape/api/include

// Starting point for project header includes. No Private headers should be in here
// They can be added in the base and plugin configs
ID_COMMON_HEADER_SEARCH_PATHS = $(OS_HEADER_SEARCH_PATHS) $(ID_PUBLIC_HEADER_SEARCH_PATHS) $(ID_OPEN_HEADER_SEARCH_PATHS) $(ASL_HEADER_SEARCH_PATHS)

//HEADER_SEARCH_PATHS is defined in the base and plugin xcconfig files

ID_COMMON_REZ_SEARCH_PATHS = $(OS_HEADER_SEARCH_PATHS) $(ID_SDK_ROOT)/source/precomp/common $(ID_SDK_ROOT)/source/precomp/msvc $(ID_SDK_ROOT)/source/public/includes $(ID_SDK_ROOT)/source/public/libs/widgetbin/includes

// Main Flags for InDesign family Cocoa enabled builds (overridden elsewhere)
ID_COCOA_ENABLE = 0
ID_DROVER_ENABLE = 1 // enable for builds based on drover (CS7 mainline)
DVA_COCOA_UI = 0
OWL_COCOA_ENABLE = 0
DVA_ENABLE_LEGACY_SKIN = 0
DVAUI_ENABLE_CSNEXT_SKIN = 1
DVA_INCLUDE_TOUCHBAR=1
DVAUI_USE_ADOBE_CLEAN=0
EXO_SUPPORTS_SHARED_VISUAL_KEYBOARD_SHORTCUT_EDITOR=0
DVAUI_DEFAULT_CSNEXT_VERSION = 5
UICANVAS_COCOA_ENABLE = 0
UXTECH_USE_BOOST_BIND=1
UXTECH_USE_BOOST_SHARED_PTR=1
DVAWORKSPACE_CSNEXT_ENABLE_WORKSPACESWITCHER = 0
ID_NO_DIRECT_DRAWING_ALLOWED = 0 // disable for cocoa builds and droverized win builds

// Boost preproc definitions
BOOST_REGEX_PREPROCESSOR_DEFINITIONS = $(BOOST_REGEX_PREPROCESSOR_DEFINITIONS) BOOST_REGEX_USE_CPP_LOCALE BOOST_REGEX_NON_RECURSIVE BOOST_HAS_ICU=1
BOOST_FILESYSTEM_PREPROCESSOR_DEFINITIONS = $(BOOST_FILESYSTEM_PREPROCESSOR_DEFINITIONS) BOOST_FILESYSTEM_VERSION=2
BOOST_PREPROCESSOR_DEFINITIONS = $(BOOST_REGEX_PREPROCESSOR_DEFINITIONS) $(BOOST_FILESYSTEM_PREPROCESSOR_DEFINITIONS)

// Turn off all modules related settings
CLANG_ENABLE_MODULES = NO
CLANG_MODULES_AUTOLINK = NO
CLANG_ENABLE_MODULE_DEBUGGING = NO
CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES = NO

// GCC flags
GCC_ENABLE_CPP_EXCEPTIONS = YES
GCC_ENABLE_CPP_RTTI = YES
GCC_INCREASE_PRECOMPILED_HEADER_SHARING = YES
GCC_INLINES_ARE_PRIVATE_EXTERN = YES
GCC_PRECOMPILE_PREFIX_HEADER = YES
GCC_PREPROCESSOR_DEFINITIONS = $(GCC_PREPROCESSOR_DEFINITIONS) MACINTOSH MACOSX_SDKVERSION=$(MACOSX_SDKVERSION) $(BIB_THROW) DVA_ENABLE_LEGACY_SKIN=$(DVA_ENABLE_LEGACY_SKIN) DVAUI_ENABLE_CSNEXT_SKIN=$(DVAUI_ENABLE_CSNEXT_SKIN) DVAUI_DEFAULT_CSNEXT_VERSION=$(DVAUI_DEFAULT_CSNEXT_VERSION) DVAWORKSPACE_CSNEXT_ENABLE_WORKSPACESWITCHER=$(DVAWORKSPACE_CSNEXT_ENABLE_WORKSPACESWITCHER) DVA_COCOA_UI=$(DVA_COCOA_UI) ID_COCOA_ENABLE=$(ID_COCOA_ENABLE) OWL_COCOA_ENABLE=$(OWL_COCOA_ENABLE) UICANVAS_COCOA_ENABLE=$(UICANVAS_COCOA_ENABLE) DVAUI_DATA_DELETER_PARAM_OPTIONAL=1 DVA_ENABLE_AGM_DRAWBOT=0 DVA_ASL_SUPPORT=1 $(BOOST_REGEX_PREPROCESSOR_DEFINITIONS) BOOST_SPIRIT_THREADSAFE BOOST_SIGNALS_NO_DEPRECATION_WARNING ID_NO_DIRECT_DRAWING_ALLOWED=$(ID_NO_DIRECT_DRAWING_ALLOWED) ID_DROVER_ENABLE=$(ID_DROVER_ENABLE) $(ID_PRECOMPILE_TYPE) DVA_INCLUDE_TOUCHBAR=$(DVA_INCLUDE_TOUCHBAR) UXTECH_USE_BOOST_BIND=$(UXTECH_USE_BOOST_BIND) UXTECH_USE_BOOST_SHARED_PTR=$(UXTECH_USE_BOOST_SHARED_PTR)
GCC_SYMBOLS_PRIVATE_EXTERN = YES
GCC_THREADSAFE_STATICS = NO
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = NO
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_CHECK_SWITCH_STATEMENTS = YES
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES
GCC_WARN_INHIBIT_ALL_WARNINGS = NO
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_MISSING_PARENTHESES = YES
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = NO
//GCC_WARN_SHADOW = YES
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_LABEL = YES
GCC_WARN_UNUSED_PARAMETER = NO
GCC_WARN_UNUSED_VALUE = YES
GCC_WARN_UNUSED_VARIABLE = YES
GCC_TREAT_WARNINGS_AS_ERRORS = YES
GCC_WARN_ABOUT_MISSING_PROTOTYPES = NO
CLANG_WARN_BOOL_CONVERSION = YES;
CLANG_WARN_CONSTANT_CONVERSION = YES;
CLANG_WARN_EMPTY_BODY = YES;
CLANG_WARN_ENUM_CONVERSION = YES;
CLANG_WARN_INT_CONVERSION = YES;
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
//GCC_WARN_64_TO_32_BIT_CONVERSION = YES // Too many warnings from headers we don't own
//GCC_WARN_UNDECLARED_SELECTOR = YES; // Not yet
GCC_WARN_UNINITIALIZED_AUTOS = YES;

//clang Xcode 5.0.2
WARNING_CFLAGS = -Wno-unknown-warning-option -Wno-nonportable-include-path -Wno-undefined-var-template -Wno-null-dereference -Wno-varargs -Wno-tautological-undefined-compare -Wno-pointer-bool-conversion -Wno-undefined-bool-conversion -Wno-absolute-value -Wno-tautological-pointer-compare -Wno-inline-new-delete -Wno-new-returns-null -Wno-c++11-narrowing -Wimplicit -Wsequence-point -Winit-self -Wmissing-field-initializers -Wpointer-arith -Wpacked -Wno-unused-parameter -Wno-unused-variable -Wno-write-strings -Wno-format -Wno-deprecated -Wformat-security -Wno-cast-align -Wno-logical-op-parentheses -Wno-c++11-extensions -Wno-switch-enum -Wno-char-subscripts -Wno-parentheses-equality -Wno-unused-function -Wno-out-of-line-declaration -Wno-return-type-c-linkage -Wno-invalid-source-encoding -Wno-#pragma-messages -Wno-inconsistent-missing-override -Wno-nullability-completeness// used with clang (-Wno-out-of-line-declaration: for AGMSWF headers, -Wno-return-type-c-linkage for agm CTInit.h header)
// Additional warning suppression flags for Xcode 6.2: -Wno-inline-new-delete -Wno-new-returns-null
// These warnings are not available in Xcode 5.0.2. To allow the code to be compiled in either versions of Xcode and to suppress the warnings returned by -Winline-new-delete and -Wnew-returns-null,
// we needed to add -Wno-unknown-warning-option to stop Xcode 5.0.2 from complaining due to these unknown warning options. This -Wno-unknown-warning-option setting should be removed once
// we move to Xcode 6.2.
// Additional warning suppression flags for Xcode 6.4: -Wno-tautological-undefined-compare -Wno-pointer-bool-conversion -Wno-undefined-bool-conversion -Wno-absolute-value -Wno-tautological-pointer-compare 

GCC_C_LANGUAGE_STANDARD = gnu99 // needed for asm syntax in InterfaceProxyFactory
CLANG_X86_VECTOR_INSTRUCTIONS = ssse3 // all Intel-based macs to date (including first gen Core Duo models) support SSSE3

// ODFRC flags
ODFRC_ADDITIONAL_FLAGS = -d MACINTOSH -d __GNUC__ -d ID_DROVER_ENABLE=$ID_DROVER_ENABLE -d ID_COCOA_ENABLE=$ID_COCOA_ENABLE -d DVAUI_ENABLE_CSNEXT_SKIN=$DVAUI_ENABLE_CSNEXT_SKIN

PER_ARCH_CFLAGS_i386 = -DMACTEL_SKIP


SCAN_ALL_SOURCE_FILES_FOR_INCLUDES = YES

// Linker Flags
PREBINDING = NO // prebinding only useful when launching on 10.3 and earlier

// plist compiler flags
PLC_OUTPUT_CREATOR = "????" //Project specific
PLC_OUTPUT_TYPE = "InDn" 		//Project specific
PLC_INCLUDES = "$(ID_SDK_ROOT)/source/public/includes"

// Misc flags
BIB_THROW = BIB_NO_THROW

// Uncomment these two lines to see which deprecated API's we are using in our code
// You can control model vs ui and dylibs vs plugin separately - see the other xcconfig files
//GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES
//GCC_TREAT_WARNINGS_AS_ERRORS = NO  

// Adding the following linker flag so that BAST does not fail code signing our binaries (don't generate LC_DATA_IN_CODE section)
// Xcode libtool we use for creating our static libraries isn't happy with either -Xlinker or -Wl.
// Since we don't really need this flag when creating static libs, skipping it.
// If you need to add a new linker option for all binaries, please add to both OTHER_LDFLAGS and OTHER_LDFLAGS_STATICLIBS below.
OTHER_LDFLAGS = -Xlinker -no_data_in_code_info
OTHER_LDFLAGS_STATICLIBS =

// To build "just like the pro's do" in the build room, uncomment the following line
//#include "_shared_build_settings/buildroom_additions.xcconfig"

ID_ICONS_SEARCH_PATHS = $(ID_SDK_ROOT)/external/workflow\ icons $(ID_SDK_ROOT)/external/workflow\ icons/Icons_x2 $(ID_SDK_ROOT)/external/workflow\ icons/Icons_x300 $(ID_SDK_ROOT)/source/open/icons $(ID_SDK_ROOT)/source/open/icons/Icons_x2 $(ID_SDK_ROOT)/source/open/icons/Icons_x150 

ID_CURSOR_ICONS_SEARCH_PATHS = $(ID_SDK_ROOT)/source/open/icons/Cursors/Cursor_x1 $(ID_SDK_ROOT)/source/open/icons/Cursors/Cursor_x2 $(ID_SDK_ROOT)/source/open/icons/Cursors/Cursor_3to2x

