<!--
//========================================================================================
//  
//  $File: //depot/devtech/indinc/8.0/docs/references/scripting-dom-idname-table.xsl $
//  
//  Owner: Adobe Developer Technologies
//  
//  $Author: weiguo $
//  
//  $DateTime: 2010/11/02 12:58:14 $
//  
//  $Revision: #1 $
//  
//  $Change: 767948 $
//  
//  Copyright 1997-2005 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

/**	XSLT stylesheet that creates a simple table for looking up scriptIDs and names.
    Use the XML dump generated by the Diagnostics plug-in as the source tree.

    Usage:

    [Saxon]

    Hint... Use the saxon.jar distributed with DollyXs @ <sdk>\devtools\sdktools\dollyxs\jars\saxon.jar
    
    For XML output:
       java -jar <sdk>\devtools\sdktools\dollyxs\jars\saxon.jar -o idnametable.xml scripting-dom-inx-idr50.xml scripting-dom-idname-table.xsl output-mode="xml-output"
    For HTML output:
       java -jar <sdk>\devtools\sdktools\dollyxs\jars\saxon.jar -o idnametable.html scripting-dom-inx-idr50.xml scripting-dom-idname-table.xsl output-mode="html-output"
         or 
       java -jar <sdk>\devtools\sdktools\dollyxs\jars\saxon.jar -o idnametable.html scripting-dom-inx-idr50.xml scripting-dom-idname-table.xsl

    [MSXSL]
    For XML output:
       msxsl scripting-dom-inx-idr50.xml scripting-dom-idname-table.xsl output-mode="xml-output" -xw > idnametable.xml
    For HTML output:
       msxsl scripting-dom-inx-idr50.xml scripting-dom-idname-table.xsl output-mode="html-output" -xw > idnametable.html
         or
       msxsl scripting-dom-inx-idr50.xml scripting-dom-idname-table.xsl -xw > idnametable.html
*/
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="xml" encoding="utf-8" standalone="yes"/>

    <!-- default is HTML output but can be overridden at XSLT processor invocation time-->
    <xsl:param name="output-mode">html-output</xsl:param>

    <!-- root level match -->
    <xsl:template match="/" >

        <!-- output message via XSLT processor -->
        <xsl:message>output-mode:<xsl:value-of select="$output-mode"/></xsl:message>

        <!-- start processing for XML output -->
        <xsl:if test="$output-mode='xml-output'">
            <idnametable>
                <!-- go process all children of specified element types -->
                <xsl:apply-templates mode="xml-output">
                    <!-- sort them by order of @scriptID-->
                    <xsl:sort select="@scriptID" order="ascending"/>
                </xsl:apply-templates>
            </idnametable>
        </xsl:if>

        <!-- start processing for HTML output -->
        <xsl:if test="$output-mode='html-output'">
            <html>
                <title>
                    <xsl:value-of select="dom/@product"/>
                    <xsl:text>&#x20;</xsl:text>
                    <xsl:value-of select="dom/@name"/>
                    DOM from version
                    <xsl:value-of select="dom/@build"/> (<xsl:value-of select="dom/@language"/>): Script ID/Name Lookup table
                </title>
                <body>
                    <h1>
                        <xsl:value-of select="dom/@product"/>
                        <xsl:text>&#x20;</xsl:text>
                        <xsl:value-of select="dom/@name"/>
                        DOM from version
                        <xsl:value-of select="dom/@build"/>
                        (<xsl:value-of select="dom/@language"/>)</h1>
                    <h2>Script ID/Name Lookup table</h2>
                    <table border="1">
                        <tr>
                            <th>scriptID</th>
                            <th>name</th>
                            <th>formattedName</th>
                            <th>type</th>
                            <th>scriptElementID</th>
                            <th>is plural?</th>
                        </tr>
                        <xsl:apply-templates mode="html-output">
                            <!-- sort them by order of @scriptID-->
                            <xsl:sort select="@scriptID" order="ascending"/>
                        </xsl:apply-templates>
                    </table>
                </body>
            </html>
        </xsl:if>
    </xsl:template>

    <!-- HTML output template rule -->
    <xsl:template match="object | event | parameter | property | enum | enumerator | suite" mode="html-output">
        <!-- test if this element has any plural info. -->
        <xsl:variable name="is-plural">
            <xsl:choose>
                <xsl:when test="string-length(@pluralScriptID)>0">1</xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <!-- output only if this element has a non-zero length @scriptID attribute.  -->
        <xsl:if test="string-length(@scriptID) > 0">
            <!-- output info for this @scriptID -->
            <tr>
                <td><tt>'<xsl:value-of select="@scriptID"/>'</tt></td>
                <td>"<xsl:value-of select="@name"/>"</td>
                <td>"<xsl:value-of select="@formattedName"/>"</td>
                <td><xsl:value-of select="local-name(.)"/></td>
                <td><xsl:value-of select="@scriptElementID"/></td>
                <td>No</td> <!-- Not plural -->
            </tr>
            <xsl:if test="$is-plural='1'">
                <!-- output info for the @pluralScriptID -->
                <tr>
                    <td><tt>'<xsl:value-of select="@pluralScriptID"/>'</tt></td>
                    <td>"<xsl:value-of select="@pluralName"/>"</td>
                    <td>&#160;</td> <!-- leave empty -->
                    <td><xsl:value-of select="local-name(.)"/></td>
                    <td>&#160;</td> <!-- leave empty -->
                    <td>Yes</td> <!-- plural -->
                </tr>
            </xsl:if>
        </xsl:if>
        <xsl:apply-templates/>
    </xsl:template>

    <!-- XML output template rule -->
    <xsl:template match="object | event | parameter | property | enum | enumerator | suite" mode="xml-output">
        <!-- test if this element has any plural info. -->
        <xsl:variable name="is-plural">
            <xsl:choose>
                <xsl:when test="string-length(@pluralScriptID)>0">1</xsl:when>
                <xsl:otherwise>0</xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:if test="string-length(@scriptID) > 0">
            <entry>
                <scriptID>'<xsl:value-of select="@scriptID"/>'</scriptID>
                <name>"<xsl:value-of select="@name"/>"</name>
                <formattedName>"<xsl:value-of select="@formattedName"/>"</formattedName>
                <type><xsl:value-of select="local-name(.)"/></type>
                <scriptElementID><xsl:value-of select="@scriptElementID"/></scriptElementID>
                <is-plural>No</is-plural>
            </entry>
            <xsl:if test="$is-plural='1'">
                <!-- output info for the @pluralScriptID -->
                <entry>
                    <scriptID>'<xsl:value-of select="@pluralScriptID"/>'</scriptID>
                    <name>"<xsl:value-of select="@pluralName"/>"</name>
                    <formattedName></formattedName> <!-- leave empty -->
                    <type><xsl:value-of select="local-name(.)"/></type>
                    <scriptElementID></scriptElementID> <!-- leave empty -->
                    <is-plural>Yes</is-plural> <!-- plural -->
                </entry>
            </xsl:if>
        </xsl:if>
        <xsl:apply-templates/>
    </xsl:template>

    <!-- eat up any text within elements -->
    <xsl:template match="text()"/>

</xsl:stylesheet>
