//========================================================================================
//This script is to get the preflight rules of InDesign and save the result in a html file.
//You can run the script under both InDesign and InDesign Server. However, when it is run
//under InDesign Server, you need to pass a parameter which defines the full path of the
//output file. For example:
//
//sampleclient -host localhost:12345 pathofthescript\DumpPreflightRules.jsx outputFilePath
//="c:\\PreflightRules.html"
//
//The output will be saved as "c:\\PreflightRules.html".
//========================================================================================

main();
 
function generateHtmlOutput()
{
	//Load the default system profile
	var profile = app.preflightProfiles[0];
	if (profile == null)
	{
		throw ("The default profile was not found");
	}

	var heading = "<h2>InDesign Preflight Rules</h2>";
	var note = "<span>This file documents the Preflight rules available in InDesign.  It is generated by running the DumpPreflightRules.jsx script.  It needs to be regenerated if you are using plug-ins that contribute additional rules.<br/></span><br/><hr><br/>";
	var jumplinks = "<table border=\"1\" cellpadding=\"5\"><tr style=Ã¥\"background-color:#EEEEEE\"><td>Rule Name</td><td>Rule Properties</td></tr>";
	var content = "";

	var ruleCount = profile.preflightProfileRules.length;
	for (var j = 0; j < ruleCount; j++)
	{
		var rule = profile.preflightProfileRules[j];			
		var dataObjectCount = rule.ruleDataObjects.length;
		if (dataObjectCount > 0)
		{
			jumplinks += "<tr><td>" + rule.name + "</td><td><a href=\"#" + rule.name + "\">yes</a><br />\n";				
			content += "<h3 id=\"" + rule.name + "\">" + rule.name + "</h3>\n";
			content += "<table border=\"1\" cellpadding=\"5\">\n"
			content += "<tr style=\"background-color:#EEEEEE\"><td style=\"width:150px\">Data Type</td><td style=\"width:200px\">Name</td><td style=\"width:150px\">Default Value</td></tr>\n"
			var dataObjectCount = rule.ruleDataObjects.length;				
			for (var k = 0; k < dataObjectCount; k++)
			{
				var dataObject = rule.ruleDataObjects[k];						
				content += "<tr><td>" + getDataObjectValueType(dataObject.dataType) + "</td><td>" + dataObject.name + "</td><td>" + dataObject.dataValue + "</td></tr>\n";
			}
			content += "</table><br />\n";
		}
		else
		{
			jumplinks += "<tr><td>" + rule.name + "</td><td>no</a><br />\n";
		}
	}			
	jumplinks += "</table><br/><hr>\n";	
	
	return "<html><body>" + heading + note + jumplinks + content + "</body></html>";
}

function getDataObjectValueType(type)
{
	switch(type)
	{
		case RuleDataType.BOOLEAN_DATA_TYPE:
			return "Boolean";
		case RuleDataType.INTEGER_DATA_TYPE:
			return "Integer";
		case RuleDataType.LIST_DATA_TYPE:
			return "List";
		case RuleDataType.OBJECT_DATA_TYPE:
			return "Object";
		case RuleDataType.REAL_DATA_TYPE:
			return "Real";
		case RuleDataType.SHORT_INTEGER_DATA_TYPE:
			return "Short Integer";
		case RuleDataType.STRING_DATA_TYPE:
			return "String";
	}
	return "No matching flag";
}

function getOutputFile(promtpMessage, outputExtension) 
{ 
		if ("Adobe InDesign" == app.name)
		{
			if(this.arguments == null)
			{
				var logFilePath  = File.saveDialog(promtpMessage, outputExtension);
				return logFile = new File(logFilePath);
			}
			else
			{
				return File(this.arguments[0]);
			}
		}
		else if("Adobe InDesign Server" == app.name)
		{
			if (app.scriptArgs.isDefined("outputFilePath"))
			{
				var outputFilePath = app.scriptArgs.getValue("outputFilePath");
				app.consoleout("Saving output to " + outputFilePath);
				
				//Ensures the interative file path is valid.
				return File(outputFilePath);
			}
			else
			{
				throw("Invalid parameter provided.  The parameter should be \"outputFilePath\"");
			}
		}
		else
		{
			throw(app.name + " is an invalid application for this script");
		}
} 

function displayMessage(msg)
{
	if ("Adobe InDesign" == app.name)
	{
		alert(msg);
	}
	else if("Adobe InDesign Server" == app.name)
	{
		app.consoleout(msg);
	}	
	else
	{
		throw(app.name + " is an invalid application for this script");
	}
}

function main()
{	
	try
	{
		var logFile = getOutputFile("Choose an HTML file to same rules to:", "*.html");
		logFile.open("w");
		logFile.write(generateHtmlOutput());
		logFile.close();
	}
	catch(e) 
	{
		displayMessage(e);
	}	
}


