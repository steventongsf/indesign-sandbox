// =================================================================================================
// Copyright 2014 Adobe Systems Incorporated
// All Rights Reserved.
//
// NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the terms
// of the Adobe license agreement accompanying it.
// =================================================================================================

#if AdobePrivate
// =================================================================================================
// Change history
// ==============
//
// Writers:
//  HK  Honey Kansal
//  ADC	Amandeep Chawla
//
// mm/dd/yy who Description of changes, most recent on top.
//
// 06-06-14 ADC 5.6-c014 [3768055] Fix warnings in public headers and client glue code which appear
//						 while building XMP components in XCode 5.0.2 with "Recommended Settings".
// 05-19-14 ADC 5.6-c012 Refactoring XMPCommon code and appropriate changes in XMPCore and XMPCompareAndMerge.
// 02-24-14 HK  5.6-c004 Added new internal XMP DOM interfaces + fixed memory leaks + implemented qualifiers for new XMP DOM.
// 02-13-14 ADC 5.5-c031 Refactoring XMPCore, implementing few APIs and fixing issues.
// 02-12-14 HK  5.5-c030 Creating client glue code for XMP DOM APIs.
//
// =================================================================================================
#endif // AdobePrivate

#include "XMPCore/Interfaces/IXMPSimpleNode.h"

#undef CALL_EQUIVALENT_VIRTUAL_FUNCTION_NO_ARGS
#define CALL_EQUIVALENT_VIRTUAL_FUNCTION_NO_ARGS( className, functionName ) {			\
			pIError error ( NULL );																	\
			p##className##_base ptr = functionName( error );										\
			if ( error )																			\
				throw NS_XMPCOMMON::MakeUncheckedSharedPointer( error );								\
				return NS_XMPCOMMON::MakeSharedPointer< className##_latest, className##_base >( ptr );	\
		}

#undef CALL_EQUIVALENT_VIRTUAL_FUNCTION
#define CALL_EQUIVALENT_VIRTUAL_FUNCTION( className, functionName, ... ) {			\
			pIError error ( NULL );																\
			p##className##_base ptr = functionName( __VA_ARGS__, error );						\
			if ( error )																		\
				throw NS_XMPCOMMON::MakeUncheckedSharedPointer( error );							\
			return NS_XMPCOMMON::MakeSharedPointer< className##_latest, className##_base >( ptr );	\
		}

#undef CALL_EQUIVALENT_CVIRTUAL_FUNCTION_NO_ARGS
#define CALL_EQUIVALENT_CVIRTUAL_FUNCTION_NO_ARGS( className, functionName ) {	\
			pIError error ( NULL );																	\
			pc##className##_base ptr = functionName( error );										\
			if ( error )																			\
				throw NS_XMPCOMMON::MakeUncheckedSharedPointer( error );								\
			return NS_XMPCOMMON::MakeSharedPointer< const className##_latest, const className##_base >( ptr );	\
		}

#undef CALL_EQUIVALENT_CVIRTUAL_FUNCTION
#define CALL_EQUIVALENT_CVIRTUAL_FUNCTION( className, functionName, ... ) {			\
			pIError error ( NULL );																\
			pc##className##_base ptr = functionName( __VA_ARGS__, error );						\
			if ( error )																		\
				throw NS_XMPCOMMON::MakeUncheckedSharedPointer( error );							\
			return NS_XMPCOMMON::MakeSharedPointer< const className##_latest, const className##_base >( ptr );	\
		}

#undef CALL_EQUIVALENT_VIRTUAL_FUNCTION_RETURNING_NOTHING
#define CALL_EQUIVALENT_VIRTUAL_FUNCTION_RETURNING_NOTHING( functionName, ... ) {	\
			pIError error ( NULL );																		\
			functionName( __VA_ARGS__, error );															\
			if ( error )																				\
				throw NS_XMPCOMMON::MakeUncheckedSharedPointer( error );									\
		}

namespace NS_XMPCORE {

	spcIUTF8String IXMPSimpleNode_v1::GetValue() const{
		CALL_EQUIVALENT_CVIRTUAL_FUNCTION_NO_ARGS ( IUTF8String, GetValue );
	}
	
	spIUTF8String IXMPSimpleNode_v1::GetValue(){
		CALL_EQUIVALENT_VIRTUAL_FUNCTION_NO_ARGS ( IUTF8String, GetValue );
	}
	
		
	void IXMPSimpleNode_v1::SetValue( const char * value ){
		CALL_EQUIVALENT_VIRTUAL_FUNCTION_RETURNING_NOTHING ( SetValue, value );
	}

}
