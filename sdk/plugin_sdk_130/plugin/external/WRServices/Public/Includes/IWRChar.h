//========================================================================================
//  
//  File: IWRChar.h
//  
//  Owner: Pascal Rubini
//  
//  Copyright 1988 - 2010 WinSoft SA. All rights reserved.
//  Usage rights licenced to Adobe Inc. 1993 - 2005.
//  
//========================================================================================

#ifndef __IWRCHAR__
#define __IWRCHAR__

#include "WRConfig.h"
#include "WRDefines.h"
#include "WROptycaRunSettings.h"
#include "WRClass.h"


#ifdef WR_WIN_ENV
#pragma warning(disable:4250)
#endif

/// internal character category
/**
This enum is used to categorize characters according to the way they must be processed by
optyca internally. They're of little use outside optyca and the modules.
**/
typedef enum
{
	kRegularCharType,			///< normal base character
	kMarkCharType,				///< combining mark
	kInterwordSpaceCharType,	///< interword or trailing space like character
	kTabCharType,				///< tab character
	kRightTabCharType,			///< right tab character
	kKashidaCharType,			///< kashida character
	kFlushSpaceCharType,		///< flush space (gets all the extra space if full justified)
	kIgnorableCharType,			///< ignorable character
	kIndentToHereCharType,		///< "indent to here" marker
	kSpacingMarkCharType,		///< generated by mark to mark + spacing glyph substitution in SBL Hebrew (more space of cantillation)
	kEndCharType				///< last type + 1
} OptycaCharType;

/// internal character properties
/**
This enum is used to remember script specific character properties for use by the full justification process, for example.
**/
typedef enum
{
	kArabicAlifLike = 1,			///< alif, mam
	kArabicKafLike  = 2,			///< kaf or gaf
	kArabicSeenLike = 4,			///< seen of sheen
	kArabicLam = 8,					///< lam
	kArabicAlif = 16,				///< alif
	kSyriacAlaphLike = 1,			///< syriac alaph
	kSyriacDalatLike  = 2,			///< syriac dalat
	kSyriacLetter = 4				///< syriac letter
} OptycaCharProperty;

/// Interface to access charecter records
/**
This class is used to access items of IWRCharBuffer objects.
@sa IWRCharBuffer, OptycaChar
**/
class WRSERVICES_DECL IWRChar
{
public:
#ifndef WR_WIN_ENV
	virtual				~IWRChar();							///< gcc needs it even in abstract classes
#endif
	virtual WRUnichar32 GetUnicode(void) const = 0;			///< return the unicode of the character
	virtual void		SetUnicode(WRUnichar32 c) = 0;		///< set the unicode of the character
	virtual WREmbeddingLevel GetLevel(void) const = 0;		///< get the resolved embedding level of the character
	virtual void		SetLevel(WREmbeddingLevel l) = 0;	///< set the resolved embedding level of the character
	virtual StyleRef	GetStyle(void) const  = 0;			///< get a reference to the style of the character
	virtual void		SetStyle(StyleRef s) = 0;			///< set the style of the character
	virtual OptycaCharType GetType(void) const = 0;			///< get the char type
	virtual void		SetType(OptycaCharType t) = 0;		///< set the char type
	virtual OptycaCharProperty GetProperties(void) const = 0;			///< get the char properties
	virtual void		SetProperties(OptycaCharProperty t) = 0;		///< set the char properties
protected:
};


#endif
