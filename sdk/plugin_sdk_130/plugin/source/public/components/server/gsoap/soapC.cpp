//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/public/components/server/gsoap/soapC.cpp $
//  
//  Owner: ???
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//  
//  soapC.cpp
//  Generated by gSOAP 2.7.9l from /Users/lmillett/thyme/source/components/soapserver/server/SSLibFunctions.h
//  Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
//  This part of the software is released under one of the following licenses:
//  GPL, the gSOAP public license, or Genivia's license for commercial use.
//  
//========================================================================================

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.9l 2011-12-16 12:50:36 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_IDSP__NullObject:
		return soap_in_IDSP__NullObject(soap, NULL, NULL, "IDSP:NullObject");
	case SOAP_TYPE_IDSP__Enumeration:
		return soap_in_IDSP__Enumeration(soap, NULL, NULL, "IDSP:Enumeration");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_IDSP__Unit:
		return soap_in_IDSP__Unit(soap, NULL, NULL, "IDSP:Unit");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_IDSP__SessionID:
		return soap_in_IDSP__SessionID(soap, NULL, NULL, "IDSP:SessionID");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLong:
		return soap_in_unsignedLong(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_IDSP__EndSession:
		return soap_in_IDSP__EndSession(soap, NULL, NULL, "IDSP:EndSession");
	case SOAP_TYPE_IDSP__BeginSession:
		return soap_in_IDSP__BeginSession(soap, NULL, NULL, "IDSP:BeginSession");
	case SOAP_TYPE_IDSP__BeginSessionResponse:
		return soap_in_IDSP__BeginSessionResponse(soap, NULL, NULL, "IDSP:BeginSessionResponse");
	case SOAP_TYPE_IDSP__RunScript:
		return soap_in_IDSP__RunScript(soap, NULL, NULL, "IDSP:RunScript");
	case SOAP_TYPE_IDSP__Result:
		return soap_in_IDSP__Result(soap, NULL, NULL, "IDSP:Result");
	case SOAP_TYPE_IDSP__RunScriptResponse:
		return soap_in_IDSP__RunScriptResponse(soap, NULL, NULL, "IDSP:RunScriptResponse");
	case SOAP_TYPE_IDSP__Record:
		return soap_in_IDSP__Record(soap, NULL, NULL, "IDSP:Record");
	case SOAP_TYPE_IDSP__Field:
		return soap_in_IDSP__Field(soap, NULL, NULL, "IDSP:Field");
	case SOAP_TYPE_IDSP__ObjectList:
		return soap_in_IDSP__ObjectList(soap, NULL, NULL, "IDSP:ObjectList");
	case SOAP_TYPE_IDSP__Object:
		return soap_in_IDSP__Object(soap, NULL, NULL, "IDSP:Object");
	case SOAP_TYPE_IDSP__List:
		return soap_in_IDSP__List(soap, NULL, NULL, "IDSP:List");
	case SOAP_TYPE_IDSP__Data:
		return soap_in_IDSP__Data(soap, NULL, NULL, "IDSP:Data");
	case SOAP_TYPE_IDSP__RunScriptParameters:
		return soap_in_IDSP__RunScriptParameters(soap, NULL, NULL, "IDSP:RunScriptParameters");
	case SOAP_TYPE_IDSP_ScriptArg:
		return soap_in_IDSP_ScriptArg(soap, NULL, NULL, "IDSP-ScriptArg");
	case SOAP_TYPE_PointerToIDSP__Result:
		return soap_in_PointerToIDSP__Result(soap, NULL, NULL, "IDSP:Result");
	case SOAP_TYPE_PointerToIDSP__RunScriptParameters:
		return soap_in_PointerToIDSP__RunScriptParameters(soap, NULL, NULL, "IDSP:RunScriptParameters");
	case SOAP_TYPE_PointerToIDSP__Field:
		return soap_in_PointerToIDSP__Field(soap, NULL, NULL, "IDSP:Field");
	case SOAP_TYPE_PointerToIDSP__Object:
		return soap_in_PointerToIDSP__Object(soap, NULL, NULL, "IDSP:Object");
	case SOAP_TYPE_PointerToIDSP__Data:
		return soap_in_PointerToIDSP__Data(soap, NULL, NULL, "IDSP:Data");
	case SOAP_TYPE_xsd__dateTime:
	{	char **s;
		s = soap_in_xsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__anyURI:
	{	char **s;
		s = soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__string:
	{	char **s;
		s = soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:NullObject"))
		{	*type = SOAP_TYPE_IDSP__NullObject;
			return soap_in_IDSP__NullObject(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:Enumeration"))
		{	*type = SOAP_TYPE_IDSP__Enumeration;
			return soap_in_IDSP__Enumeration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:Unit"))
		{	*type = SOAP_TYPE_IDSP__Unit;
			return soap_in_IDSP__Unit(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:SessionID"))
		{	*type = SOAP_TYPE_IDSP__SessionID;
			return soap_in_IDSP__SessionID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLong;
			return soap_in_unsignedLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:EndSession"))
		{	*type = SOAP_TYPE_IDSP__EndSession;
			return soap_in_IDSP__EndSession(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:BeginSession"))
		{	*type = SOAP_TYPE_IDSP__BeginSession;
			return soap_in_IDSP__BeginSession(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:BeginSessionResponse"))
		{	*type = SOAP_TYPE_IDSP__BeginSessionResponse;
			return soap_in_IDSP__BeginSessionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:RunScript"))
		{	*type = SOAP_TYPE_IDSP__RunScript;
			return soap_in_IDSP__RunScript(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:Result"))
		{	*type = SOAP_TYPE_IDSP__Result;
			return soap_in_IDSP__Result(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:RunScriptResponse"))
		{	*type = SOAP_TYPE_IDSP__RunScriptResponse;
			return soap_in_IDSP__RunScriptResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:Record"))
		{	*type = SOAP_TYPE_IDSP__Record;
			return soap_in_IDSP__Record(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:Field"))
		{	*type = SOAP_TYPE_IDSP__Field;
			return soap_in_IDSP__Field(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:ObjectList"))
		{	*type = SOAP_TYPE_IDSP__ObjectList;
			return soap_in_IDSP__ObjectList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:Object"))
		{	*type = SOAP_TYPE_IDSP__Object;
			return soap_in_IDSP__Object(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:List"))
		{	*type = SOAP_TYPE_IDSP__List;
			return soap_in_IDSP__List(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:Data"))
		{	*type = SOAP_TYPE_IDSP__Data;
			return soap_in_IDSP__Data(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP:RunScriptParameters"))
		{	*type = SOAP_TYPE_IDSP__RunScriptParameters;
			return soap_in_IDSP__RunScriptParameters(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "IDSP-ScriptArg"))
		{	*type = SOAP_TYPE_IDSP_ScriptArg;
			return soap_in_IDSP_ScriptArg(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	char **s;
			*type = SOAP_TYPE_xsd__dateTime;
			s = soap_in_xsd__dateTime(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	char **s;
			*type = SOAP_TYPE_xsd__anyURI;
			s = soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_xsd__string;
			s = soap_in_xsd__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_IDSP__NullObject:
		return soap_out_IDSP__NullObject(soap, tag, id, (const long *)ptr, "IDSP:NullObject");
	case SOAP_TYPE_IDSP__Enumeration:
		return soap_out_IDSP__Enumeration(soap, tag, id, (const long *)ptr, "IDSP:Enumeration");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const long *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__long:
		return soap_out_xsd__long(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__float:
		return soap_out_xsd__float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_IDSP__Unit:
		return soap_out_IDSP__Unit(soap, tag, id, (const double *)ptr, "IDSP:Unit");
	case SOAP_TYPE_xsd__double:
		return soap_out_xsd__double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_IDSP__SessionID:
		return soap_out_IDSP__SessionID(soap, tag, id, (const unsigned int *)ptr, "IDSP:SessionID");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLong:
		return soap_out_unsignedLong(soap, tag, id, (const unsigned long *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__boolean:
		return soap_out_xsd__boolean(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_IDSP__EndSession:
		return soap_out_IDSP__EndSession(soap, tag, id, (const struct IDSP__EndSession *)ptr, "IDSP:EndSession");
	case SOAP_TYPE_IDSP__BeginSession:
		return soap_out_IDSP__BeginSession(soap, tag, id, (const struct IDSP__BeginSession *)ptr, "IDSP:BeginSession");
	case SOAP_TYPE_IDSP__BeginSessionResponse:
		return soap_out_IDSP__BeginSessionResponse(soap, tag, id, (const struct IDSP__BeginSessionResponse *)ptr, "IDSP:BeginSessionResponse");
	case SOAP_TYPE_IDSP__RunScript:
		return soap_out_IDSP__RunScript(soap, tag, id, (const struct IDSP__RunScript *)ptr, "IDSP:RunScript");
	case SOAP_TYPE_IDSP__Result:
		return soap_out_IDSP__Result(soap, tag, id, (const struct IDSP__Result *)ptr, "IDSP:Result");
	case SOAP_TYPE_IDSP__RunScriptResponse:
		return soap_out_IDSP__RunScriptResponse(soap, tag, id, (const struct IDSP__RunScriptResponse *)ptr, "IDSP:RunScriptResponse");
	case SOAP_TYPE_IDSP__Record:
		return soap_out_IDSP__Record(soap, tag, id, (const struct IDSP__Record *)ptr, "IDSP:Record");
	case SOAP_TYPE_IDSP__Field:
		return soap_out_IDSP__Field(soap, tag, id, (const struct IDSP__Field *)ptr, "IDSP:Field");
	case SOAP_TYPE_IDSP__ObjectList:
		return soap_out_IDSP__ObjectList(soap, tag, id, (const struct IDSP__ObjectList *)ptr, "IDSP:ObjectList");
	case SOAP_TYPE_IDSP__Object:
		return soap_out_IDSP__Object(soap, tag, id, (const struct IDSP__Object *)ptr, "IDSP:Object");
	case SOAP_TYPE_IDSP__List:
		return soap_out_IDSP__List(soap, tag, id, (const struct IDSP__List *)ptr, "IDSP:List");
	case SOAP_TYPE_IDSP__Data:
		return soap_out_IDSP__Data(soap, tag, id, (const struct IDSP__Data *)ptr, "IDSP:Data");
	case SOAP_TYPE_IDSP__RunScriptParameters:
		return soap_out_IDSP__RunScriptParameters(soap, tag, id, (const struct IDSP__RunScriptParameters *)ptr, "IDSP:RunScriptParameters");
	case SOAP_TYPE_IDSP_ScriptArg:
		return soap_out_IDSP_ScriptArg(soap, tag, id, (const struct IDSP_ScriptArg *)ptr, "IDSP-ScriptArg");
	case SOAP_TYPE_PointerToIDSP__Result:
		return soap_out_PointerToIDSP__Result(soap, tag, id, (struct IDSP__Result *const*)ptr, "IDSP:Result");
	case SOAP_TYPE_PointerToIDSP__RunScriptParameters:
		return soap_out_PointerToIDSP__RunScriptParameters(soap, tag, id, (struct IDSP__RunScriptParameters *const*)ptr, "IDSP:RunScriptParameters");
	case SOAP_TYPE_PointerToIDSP__Field:
		return soap_out_PointerToIDSP__Field(soap, tag, id, (struct IDSP__Field *const*)ptr, "IDSP:Field");
	case SOAP_TYPE_PointerToIDSP__Object:
		return soap_out_PointerToIDSP__Object(soap, tag, id, (struct IDSP__Object *const*)ptr, "IDSP:Object");
	case SOAP_TYPE_PointerToIDSP__Data:
		return soap_out_PointerToIDSP__Data(soap, tag, id, (struct IDSP__Data *const*)ptr, "IDSP:Data");
	case SOAP_TYPE_xsd__dateTime:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:dateTime");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_IDSP__EndSession:
		soap_serialize_IDSP__EndSession(soap, (const struct IDSP__EndSession *)ptr);
		break;
	case SOAP_TYPE_IDSP__BeginSession:
		soap_serialize_IDSP__BeginSession(soap, (const struct IDSP__BeginSession *)ptr);
		break;
	case SOAP_TYPE_IDSP__BeginSessionResponse:
		soap_serialize_IDSP__BeginSessionResponse(soap, (const struct IDSP__BeginSessionResponse *)ptr);
		break;
	case SOAP_TYPE_IDSP__RunScript:
		soap_serialize_IDSP__RunScript(soap, (const struct IDSP__RunScript *)ptr);
		break;
	case SOAP_TYPE_IDSP__Result:
		soap_serialize_IDSP__Result(soap, (const struct IDSP__Result *)ptr);
		break;
	case SOAP_TYPE_IDSP__RunScriptResponse:
		soap_serialize_IDSP__RunScriptResponse(soap, (const struct IDSP__RunScriptResponse *)ptr);
		break;
	case SOAP_TYPE_IDSP__Record:
		soap_serialize_IDSP__Record(soap, (const struct IDSP__Record *)ptr);
		break;
	case SOAP_TYPE_IDSP__Field:
		soap_serialize_IDSP__Field(soap, (const struct IDSP__Field *)ptr);
		break;
	case SOAP_TYPE_IDSP__ObjectList:
		soap_serialize_IDSP__ObjectList(soap, (const struct IDSP__ObjectList *)ptr);
		break;
	case SOAP_TYPE_IDSP__Object:
		soap_serialize_IDSP__Object(soap, (const struct IDSP__Object *)ptr);
		break;
	case SOAP_TYPE_IDSP__List:
		soap_serialize_IDSP__List(soap, (const struct IDSP__List *)ptr);
		break;
	case SOAP_TYPE_IDSP__Data:
		soap_serialize_IDSP__Data(soap, (const struct IDSP__Data *)ptr);
		break;
	case SOAP_TYPE_IDSP__RunScriptParameters:
		soap_serialize_IDSP__RunScriptParameters(soap, (const struct IDSP__RunScriptParameters *)ptr);
		break;
	case SOAP_TYPE_IDSP_ScriptArg:
		soap_serialize_IDSP_ScriptArg(soap, (const struct IDSP_ScriptArg *)ptr);
		break;
	case SOAP_TYPE_PointerToIDSP__Result:
		soap_serialize_PointerToIDSP__Result(soap, (struct IDSP__Result *const*)ptr);
		break;
	case SOAP_TYPE_PointerToIDSP__RunScriptParameters:
		soap_serialize_PointerToIDSP__RunScriptParameters(soap, (struct IDSP__RunScriptParameters *const*)ptr);
		break;
	case SOAP_TYPE_PointerToIDSP__Field:
		soap_serialize_PointerToIDSP__Field(soap, (struct IDSP__Field *const*)ptr);
		break;
	case SOAP_TYPE_PointerToIDSP__Object:
		soap_serialize_PointerToIDSP__Object(soap, (struct IDSP__Object *const*)ptr);
		break;
	case SOAP_TYPE_PointerToIDSP__Data:
		soap_serialize_PointerToIDSP__Data(soap, (struct IDSP__Data *const*)ptr);
		break;
	case SOAP_TYPE_xsd__dateTime:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_xsd__string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP_ScriptArg:
		return (void*)soap_instantiate_IDSP_ScriptArg(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__RunScriptParameters:
		return (void*)soap_instantiate_IDSP__RunScriptParameters(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__Data:
		return (void*)soap_instantiate_IDSP__Data(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__List:
		return (void*)soap_instantiate_IDSP__List(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__Object:
		return (void*)soap_instantiate_IDSP__Object(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__ObjectList:
		return (void*)soap_instantiate_IDSP__ObjectList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__Field:
		return (void*)soap_instantiate_IDSP__Field(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__Record:
		return (void*)soap_instantiate_IDSP__Record(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__RunScriptResponse:
		return (void*)soap_instantiate_IDSP__RunScriptResponse(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_IDSP__Result:
		return (void*)soap_instantiate_IDSP__Result(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__RunScript:
		return (void*)soap_instantiate_IDSP__RunScript(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__BeginSessionResponse:
		return (void*)soap_instantiate_IDSP__BeginSessionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__BeginSession:
		return (void*)soap_instantiate_IDSP__BeginSession(soap, -1, type, arrayType, n);
	case SOAP_TYPE_IDSP__EndSession:
		return (void*)soap_instantiate_IDSP__EndSession(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfIDSP_ScriptArg:
		return (void*)soap_instantiate_std__vectorTemplateOfIDSP_ScriptArg(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_IDSP_ScriptArg:
		if (p->size < 0)
			delete (struct IDSP_ScriptArg*)p->ptr;
		else
			delete[] (struct IDSP_ScriptArg*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__RunScriptParameters:
		if (p->size < 0)
			delete (struct IDSP__RunScriptParameters*)p->ptr;
		else
			delete[] (struct IDSP__RunScriptParameters*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__Data:
		if (p->size < 0)
			delete (struct IDSP__Data*)p->ptr;
		else
			delete[] (struct IDSP__Data*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__List:
		if (p->size < 0)
			delete (struct IDSP__List*)p->ptr;
		else
			delete[] (struct IDSP__List*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__Object:
		if (p->size < 0)
			delete (struct IDSP__Object*)p->ptr;
		else
			delete[] (struct IDSP__Object*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__ObjectList:
		if (p->size < 0)
			delete (struct IDSP__ObjectList*)p->ptr;
		else
			delete[] (struct IDSP__ObjectList*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__Field:
		if (p->size < 0)
			delete (struct IDSP__Field*)p->ptr;
		else
			delete[] (struct IDSP__Field*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__Record:
		if (p->size < 0)
			delete (struct IDSP__Record*)p->ptr;
		else
			delete[] (struct IDSP__Record*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__RunScriptResponse:
		if (p->size < 0)
			delete (struct IDSP__RunScriptResponse*)p->ptr;
		else
			delete[] (struct IDSP__RunScriptResponse*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__Result:
		if (p->size < 0)
			delete (struct IDSP__Result*)p->ptr;
		else
			delete[] (struct IDSP__Result*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__RunScript:
		if (p->size < 0)
			delete (struct IDSP__RunScript*)p->ptr;
		else
			delete[] (struct IDSP__RunScript*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__BeginSessionResponse:
		if (p->size < 0)
			delete (struct IDSP__BeginSessionResponse*)p->ptr;
		else
			delete[] (struct IDSP__BeginSessionResponse*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__BeginSession:
		if (p->size < 0)
			delete (struct IDSP__BeginSession*)p->ptr;
		else
			delete[] (struct IDSP__BeginSession*)p->ptr;
		break;
	case SOAP_TYPE_IDSP__EndSession:
		if (p->size < 0)
			delete (struct IDSP__EndSession*)p->ptr;
		else
			delete[] (struct IDSP__EndSession*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfIDSP_ScriptArg:
		if (p->size < 0)
			delete (std::vector<struct IDSP_ScriptArg >*)p->ptr;
		else
			delete[] (std::vector<struct IDSP_ScriptArg >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfIDSP_ScriptArg:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<struct IDSP_ScriptArg >*)p)[len] = *(struct IDSP_ScriptArg *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__NullObject(struct soap *soap, long *a)
{	soap_default_long(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__NullObject(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__NullObject);
	if (soap_out_IDSP__NullObject(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__NullObject(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_IDSP__NullObject);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_IDSP__NullObject(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__NullObject(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_IDSP__NullObject(struct soap *soap, const char *tag, long *a, const char *type)
{
	return soap_inlong(soap, tag, a, type, SOAP_TYPE_IDSP__NullObject);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__Enumeration(struct soap *soap, long *a)
{	soap_default_long(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__Enumeration(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__Enumeration);
	if (soap_out_IDSP__Enumeration(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__Enumeration(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_IDSP__Enumeration);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_IDSP__Enumeration(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__Enumeration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_IDSP__Enumeration(struct soap *soap, const char *tag, long *a, const char *type)
{
	return soap_inlong(soap, tag, a, type, SOAP_TYPE_IDSP__Enumeration);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__int(struct soap *soap, long *a)
{	soap_default_long(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__int);
	if (soap_out_xsd__int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, long *a, const char *type)
{
	return soap_inlong(soap, tag, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_long);
	if (soap_out_long(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{
	return soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__long(struct soap *soap, LONG64 *a)
{	soap_default_LONG64(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__long(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__long);
	if (soap_out_xsd__long(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__float(struct soap *soap, float *a)
{	soap_default_float(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__float);
	if (soap_out_xsd__float(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_xsd__float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	return soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__Unit(struct soap *soap, double *a)
{	soap_default_double(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__Unit(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__Unit);
	if (soap_out_IDSP__Unit(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__Unit(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_IDSP__Unit);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_IDSP__Unit(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__Unit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_IDSP__Unit(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_IDSP__Unit);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__double(struct soap *soap, double *a)
{	soap_default_double(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__double);
	if (soap_out_xsd__double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__SessionID(struct soap *soap, unsigned int *a)
{	soap_default_unsignedInt(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__SessionID(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__SessionID);
	if (soap_out_IDSP__SessionID(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__SessionID(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_IDSP__SessionID);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_IDSP__SessionID(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__SessionID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_IDSP__SessionID(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_IDSP__SessionID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLong(struct soap *soap, unsigned long *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLong
	*a = SOAP_DEFAULT_unsignedLong;
#else
	*a = (unsigned long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLong(struct soap *soap, const unsigned long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedLong);
	if (soap_out_unsignedLong(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLong(struct soap *soap, const char *tag, int id, const unsigned long *a, const char *type)
{
	return soap_outunsignedLong(soap, tag, id, a, type, SOAP_TYPE_unsignedLong);
}

SOAP_FMAC3 unsigned long * SOAP_FMAC4 soap_get_unsignedLong(struct soap *soap, unsigned long *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned long * SOAP_FMAC4 soap_in_unsignedLong(struct soap *soap, const char *tag, unsigned long *a, const char *type)
{
	return soap_inunsignedLong(soap, tag, a, type, SOAP_TYPE_unsignedLong);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__boolean(struct soap *soap, bool *a)
{	soap_default_bool(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__boolean);
	if (soap_out_xsd__boolean(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__boolean2s(struct soap *soap, bool n)
{	return soap_bool2s(soap, n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xsd__boolean), type) || soap_send(soap, soap_xsd__boolean2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__boolean(struct soap *soap, const char *s, bool *a)
{
	return soap_s2bool(soap, s, a);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2xsd__boolean(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__boolean, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, type))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__EndSession(struct soap *soap, struct IDSP__EndSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_IDSP__SessionID(soap, &a->sessionID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__EndSession(struct soap *soap, const struct IDSP__EndSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__EndSession(struct soap *soap, const struct IDSP__EndSession *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__EndSession);
	if (soap_out_IDSP__EndSession(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__EndSession(struct soap *soap, const char *tag, int id, const struct IDSP__EndSession *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IDSP__EndSession), type))
		return soap->error;
	if (soap_out_IDSP__SessionID(soap, "sessionID", -1, &a->sessionID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__EndSession * SOAP_FMAC4 soap_get_IDSP__EndSession(struct soap *soap, struct IDSP__EndSession *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__EndSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__EndSession * SOAP_FMAC4 soap_in_IDSP__EndSession(struct soap *soap, const char *tag, struct IDSP__EndSession *a, const char *type)
{
	short soap_flag_sessionID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct IDSP__EndSession *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__EndSession, sizeof(struct IDSP__EndSession), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__EndSession(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_IDSP__SessionID(soap, "sessionID", &a->sessionID, "IDSP:SessionID"))
				{	soap_flag_sessionID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__EndSession *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__EndSession, 0, sizeof(struct IDSP__EndSession), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__EndSession * SOAP_FMAC6 soap_new_IDSP__EndSession(struct soap *soap, int n)
{	return soap_instantiate_IDSP__EndSession(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__EndSession(struct soap *soap, struct IDSP__EndSession *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__EndSession * SOAP_FMAC4 soap_instantiate_IDSP__EndSession(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__EndSession(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__EndSession, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__EndSession;
		if (size)
			*size = sizeof(struct IDSP__EndSession);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__EndSession[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__EndSession);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__EndSession*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__EndSession(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__EndSession %p -> %p\n", q, p));
	*(struct IDSP__EndSession*)p = *(struct IDSP__EndSession*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__BeginSession(struct soap *soap, struct IDSP__BeginSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__BeginSession(struct soap *soap, const struct IDSP__BeginSession *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__BeginSession(struct soap *soap, const struct IDSP__BeginSession *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__BeginSession);
	if (soap_out_IDSP__BeginSession(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__BeginSession(struct soap *soap, const char *tag, int id, const struct IDSP__BeginSession *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IDSP__BeginSession), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__BeginSession * SOAP_FMAC4 soap_get_IDSP__BeginSession(struct soap *soap, struct IDSP__BeginSession *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__BeginSession(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__BeginSession * SOAP_FMAC4 soap_in_IDSP__BeginSession(struct soap *soap, const char *tag, struct IDSP__BeginSession *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct IDSP__BeginSession *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__BeginSession, sizeof(struct IDSP__BeginSession), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__BeginSession(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__BeginSession *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__BeginSession, 0, sizeof(struct IDSP__BeginSession), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__BeginSession * SOAP_FMAC6 soap_new_IDSP__BeginSession(struct soap *soap, int n)
{	return soap_instantiate_IDSP__BeginSession(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__BeginSession(struct soap *soap, struct IDSP__BeginSession *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__BeginSession * SOAP_FMAC4 soap_instantiate_IDSP__BeginSession(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__BeginSession(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__BeginSession, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__BeginSession;
		if (size)
			*size = sizeof(struct IDSP__BeginSession);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__BeginSession[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__BeginSession);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__BeginSession*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__BeginSession(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__BeginSession %p -> %p\n", q, p));
	*(struct IDSP__BeginSession*)p = *(struct IDSP__BeginSession*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__BeginSessionResponse(struct soap *soap, struct IDSP__BeginSessionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_IDSP__SessionID(soap, &a->sessionID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__BeginSessionResponse(struct soap *soap, const struct IDSP__BeginSessionResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__BeginSessionResponse(struct soap *soap, const struct IDSP__BeginSessionResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__BeginSessionResponse);
	if (soap_out_IDSP__BeginSessionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__BeginSessionResponse(struct soap *soap, const char *tag, int id, const struct IDSP__BeginSessionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IDSP__BeginSessionResponse), type))
		return soap->error;
	if (soap_out_IDSP__SessionID(soap, "sessionID", -1, &a->sessionID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__BeginSessionResponse * SOAP_FMAC4 soap_get_IDSP__BeginSessionResponse(struct soap *soap, struct IDSP__BeginSessionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__BeginSessionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__BeginSessionResponse * SOAP_FMAC4 soap_in_IDSP__BeginSessionResponse(struct soap *soap, const char *tag, struct IDSP__BeginSessionResponse *a, const char *type)
{
	short soap_flag_sessionID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct IDSP__BeginSessionResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__BeginSessionResponse, sizeof(struct IDSP__BeginSessionResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__BeginSessionResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sessionID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_IDSP__SessionID(soap, "sessionID", &a->sessionID, "IDSP:SessionID"))
				{	soap_flag_sessionID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__BeginSessionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__BeginSessionResponse, 0, sizeof(struct IDSP__BeginSessionResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sessionID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__BeginSessionResponse * SOAP_FMAC6 soap_new_IDSP__BeginSessionResponse(struct soap *soap, int n)
{	return soap_instantiate_IDSP__BeginSessionResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__BeginSessionResponse(struct soap *soap, struct IDSP__BeginSessionResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__BeginSessionResponse * SOAP_FMAC4 soap_instantiate_IDSP__BeginSessionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__BeginSessionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__BeginSessionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__BeginSessionResponse;
		if (size)
			*size = sizeof(struct IDSP__BeginSessionResponse);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__BeginSessionResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__BeginSessionResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__BeginSessionResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__BeginSessionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__BeginSessionResponse %p -> %p\n", q, p));
	*(struct IDSP__BeginSessionResponse*)p = *(struct IDSP__BeginSessionResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__RunScript(struct soap *soap, struct IDSP__RunScript *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->runScriptParameters = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__RunScript(struct soap *soap, const struct IDSP__RunScript *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToIDSP__RunScriptParameters(soap, &a->runScriptParameters);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__RunScript(struct soap *soap, const struct IDSP__RunScript *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__RunScript);
	if (soap_out_IDSP__RunScript(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__RunScript(struct soap *soap, const char *tag, int id, const struct IDSP__RunScript *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IDSP__RunScript), type))
		return soap->error;
	if (soap_out_PointerToIDSP__RunScriptParameters(soap, "runScriptParameters", -1, &a->runScriptParameters, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__RunScript * SOAP_FMAC4 soap_get_IDSP__RunScript(struct soap *soap, struct IDSP__RunScript *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__RunScript(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__RunScript * SOAP_FMAC4 soap_in_IDSP__RunScript(struct soap *soap, const char *tag, struct IDSP__RunScript *a, const char *type)
{
	short soap_flag_runScriptParameters = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct IDSP__RunScript *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__RunScript, sizeof(struct IDSP__RunScript), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__RunScript(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_runScriptParameters && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToIDSP__RunScriptParameters(soap, "runScriptParameters", &a->runScriptParameters, "IDSP:RunScriptParameters"))
				{	soap_flag_runScriptParameters--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__RunScript *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__RunScript, 0, sizeof(struct IDSP__RunScript), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__RunScript * SOAP_FMAC6 soap_new_IDSP__RunScript(struct soap *soap, int n)
{	return soap_instantiate_IDSP__RunScript(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__RunScript(struct soap *soap, struct IDSP__RunScript *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__RunScript * SOAP_FMAC4 soap_instantiate_IDSP__RunScript(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__RunScript(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__RunScript, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__RunScript;
		if (size)
			*size = sizeof(struct IDSP__RunScript);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__RunScript[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__RunScript);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__RunScript*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__RunScript(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__RunScript %p -> %p\n", q, p));
	*(struct IDSP__RunScript*)p = *(struct IDSP__RunScript*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__Result(struct soap *soap, struct IDSP__Result *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__Result(struct soap *soap, const struct IDSP__Result *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__Result(struct soap *soap, const struct IDSP__Result *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__Result);
	if (soap_out_IDSP__Result(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__Result(struct soap *soap, const char *tag, int id, const struct IDSP__Result *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IDSP__Result), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__Result * SOAP_FMAC4 soap_get_IDSP__Result(struct soap *soap, struct IDSP__Result *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__Result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__Result * SOAP_FMAC4 soap_in_IDSP__Result(struct soap *soap, const char *tag, struct IDSP__Result *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct IDSP__Result *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__Result, sizeof(struct IDSP__Result), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__Result(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__Result *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__Result, 0, sizeof(struct IDSP__Result), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__Result * SOAP_FMAC6 soap_new_IDSP__Result(struct soap *soap, int n)
{	return soap_instantiate_IDSP__Result(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__Result(struct soap *soap, struct IDSP__Result *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__Result * SOAP_FMAC4 soap_instantiate_IDSP__Result(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__Result(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__Result, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__Result;
		if (size)
			*size = sizeof(struct IDSP__Result);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__Result[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__Result);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__Result*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__Result(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__Result %p -> %p\n", q, p));
	*(struct IDSP__Result*)p = *(struct IDSP__Result*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_IDSP__SessionID(soap, &a->IDSP__sessionID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	if (soap_out_IDSP__SessionID(soap, "IDSP:sessionID", -1, &a->IDSP__sessionID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	short soap_flag_IDSP__sessionID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_IDSP__sessionID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_IDSP__SessionID(soap, "IDSP:sessionID", &a->IDSP__sessionID, "IDSP:SessionID"))
				{	soap_flag_IDSP__sessionID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_IDSP__sessionID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__RunScriptResponse(struct soap *soap, struct IDSP__RunScriptResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->errorNumber);
	soap_default_string(soap, &a->errorString);
	a->scriptResult = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__RunScriptResponse(struct soap *soap, const struct IDSP__RunScriptResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->errorString);
	soap_serialize_PointerToIDSP__Data(soap, &a->scriptResult);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__RunScriptResponse(struct soap *soap, const struct IDSP__RunScriptResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__RunScriptResponse);
	if (soap_out_IDSP__RunScriptResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__RunScriptResponse(struct soap *soap, const char *tag, int id, const struct IDSP__RunScriptResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IDSP__RunScriptResponse), type))
		return soap->error;
	if (soap_out_int(soap, "errorNumber", -1, &a->errorNumber, ""))
		return soap->error;
	if (soap_out_string(soap, "errorString", -1, &a->errorString, ""))
		return soap->error;
	if (soap_out_PointerToIDSP__Data(soap, "scriptResult", -1, &a->scriptResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__RunScriptResponse * SOAP_FMAC4 soap_get_IDSP__RunScriptResponse(struct soap *soap, struct IDSP__RunScriptResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__RunScriptResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__RunScriptResponse * SOAP_FMAC4 soap_in_IDSP__RunScriptResponse(struct soap *soap, const char *tag, struct IDSP__RunScriptResponse *a, const char *type)
{
	short soap_flag_errorNumber = 1, soap_flag_errorString = 1, soap_flag_scriptResult = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct IDSP__RunScriptResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__RunScriptResponse, sizeof(struct IDSP__RunScriptResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__RunScriptResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_errorNumber && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "errorNumber", &a->errorNumber, "xsd:int"))
				{	soap_flag_errorNumber--;
					continue;
				}
			if (soap_flag_errorString && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "errorString", &a->errorString, "xsd:string"))
				{	soap_flag_errorString--;
					continue;
				}
			if (soap_flag_scriptResult && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToIDSP__Data(soap, "scriptResult", &a->scriptResult, "IDSP:Data"))
				{	soap_flag_scriptResult--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__RunScriptResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__RunScriptResponse, 0, sizeof(struct IDSP__RunScriptResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_errorNumber > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__RunScriptResponse * SOAP_FMAC6 soap_new_IDSP__RunScriptResponse(struct soap *soap, int n)
{	return soap_instantiate_IDSP__RunScriptResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__RunScriptResponse(struct soap *soap, struct IDSP__RunScriptResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__RunScriptResponse * SOAP_FMAC4 soap_instantiate_IDSP__RunScriptResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__RunScriptResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__RunScriptResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__RunScriptResponse;
		if (size)
			*size = sizeof(struct IDSP__RunScriptResponse);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__RunScriptResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__RunScriptResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__RunScriptResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__RunScriptResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__RunScriptResponse %p -> %p\n", q, p));
	*(struct IDSP__RunScriptResponse*)p = *(struct IDSP__RunScriptResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__Record(struct soap *soap, struct IDSP__Record *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__Record(struct soap *soap, struct IDSP__Record const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_IDSP__Record))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_IDSP__Field);
			soap_serialize_IDSP__Field(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__Record(struct soap *soap, const struct IDSP__Record *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_IDSP__Record);
	if (soap_out_IDSP__Record(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__Record(struct soap *soap, const char *tag, int id, const struct IDSP__Record *a, const char *type)
{
	int i, n = a->__size;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_IDSP__Record);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap_out_IDSP__Field(soap, "item", -1, &a->__ptr[i], "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__Record * SOAP_FMAC4 soap_get_IDSP__Record(struct soap *soap, struct IDSP__Record *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__Record(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__Record * SOAP_FMAC4 soap_in_IDSP__Record(struct soap *soap, const char *tag, struct IDSP__Record *a, const char *type)
{	int i, j;
	struct IDSP__Field *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_array(soap, "IDSP:Field") && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct IDSP__Record *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__Record, sizeof(struct IDSP__Record), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__Record(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct IDSP__Field *)soap_malloc(soap, sizeof(struct IDSP__Field) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_IDSP__Field(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_IDSP__Field(soap, NULL, a->__ptr + i, "IDSP:Field"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct IDSP__Field *)soap_push_block(soap, sizeof(struct IDSP__Field));
				if (!p)
					return NULL;
				soap_default_IDSP__Field(soap, p);
				if (!soap_in_IDSP__Field(soap, NULL, p, "IDSP:Field"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct IDSP__Field *)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__Record *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__Record, 0, sizeof(struct IDSP__Record), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__Record * SOAP_FMAC6 soap_new_IDSP__Record(struct soap *soap, int n)
{	return soap_instantiate_IDSP__Record(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__Record(struct soap *soap, struct IDSP__Record *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__Record * SOAP_FMAC4 soap_instantiate_IDSP__Record(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__Record(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__Record, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__Record;
		if (size)
			*size = sizeof(struct IDSP__Record);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__Record[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__Record);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__Record*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__Record(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__Record %p -> %p\n", q, p));
	*(struct IDSP__Record*)p = *(struct IDSP__Record*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__Field(struct soap *soap, struct IDSP__Field *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedLong(soap, &a->id);
	a->data = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__Field(struct soap *soap, const struct IDSP__Field *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToIDSP__Data(soap, &a->data);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__Field(struct soap *soap, const struct IDSP__Field *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__Field);
	if (soap_out_IDSP__Field(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__Field(struct soap *soap, const char *tag, int id, const struct IDSP__Field *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IDSP__Field), type))
		return soap->error;
	if (soap_out_unsignedLong(soap, "id", -1, &a->id, ""))
		return soap->error;
	if (soap_out_PointerToIDSP__Data(soap, "data", -1, &a->data, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__Field * SOAP_FMAC4 soap_get_IDSP__Field(struct soap *soap, struct IDSP__Field *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__Field(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__Field * SOAP_FMAC4 soap_in_IDSP__Field(struct soap *soap, const char *tag, struct IDSP__Field *a, const char *type)
{
	short soap_flag_id = 1, soap_flag_data = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct IDSP__Field *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__Field, sizeof(struct IDSP__Field), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__Field(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "id", &a->id, "xsd:unsignedLong"))
				{	soap_flag_id--;
					continue;
				}
			if (soap_flag_data && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToIDSP__Data(soap, "data", &a->data, "IDSP:Data"))
				{	soap_flag_data--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__Field *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__Field, 0, sizeof(struct IDSP__Field), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__Field * SOAP_FMAC6 soap_new_IDSP__Field(struct soap *soap, int n)
{	return soap_instantiate_IDSP__Field(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__Field(struct soap *soap, struct IDSP__Field *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__Field * SOAP_FMAC4 soap_instantiate_IDSP__Field(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__Field(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__Field, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__Field;
		if (size)
			*size = sizeof(struct IDSP__Field);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__Field[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__Field);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__Field*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__Field(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__Field %p -> %p\n", q, p));
	*(struct IDSP__Field*)p = *(struct IDSP__Field*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__ObjectList(struct soap *soap, struct IDSP__ObjectList *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__ObjectList(struct soap *soap, struct IDSP__ObjectList const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_IDSP__ObjectList))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_IDSP__Object);
			soap_serialize_IDSP__Object(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__ObjectList(struct soap *soap, const struct IDSP__ObjectList *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_IDSP__ObjectList);
	if (soap_out_IDSP__ObjectList(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__ObjectList(struct soap *soap, const char *tag, int id, const struct IDSP__ObjectList *a, const char *type)
{
	int i, n = a->__size;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_IDSP__ObjectList);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap_out_IDSP__Object(soap, "item", -1, &a->__ptr[i], "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__ObjectList * SOAP_FMAC4 soap_get_IDSP__ObjectList(struct soap *soap, struct IDSP__ObjectList *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__ObjectList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__ObjectList * SOAP_FMAC4 soap_in_IDSP__ObjectList(struct soap *soap, const char *tag, struct IDSP__ObjectList *a, const char *type)
{	int i, j;
	struct IDSP__Object *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_array(soap, "IDSP:Object") && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct IDSP__ObjectList *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__ObjectList, sizeof(struct IDSP__ObjectList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__ObjectList(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct IDSP__Object *)soap_malloc(soap, sizeof(struct IDSP__Object) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_IDSP__Object(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_IDSP__Object(soap, NULL, a->__ptr + i, "IDSP:Object"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct IDSP__Object *)soap_push_block(soap, sizeof(struct IDSP__Object));
				if (!p)
					return NULL;
				soap_default_IDSP__Object(soap, p);
				if (!soap_in_IDSP__Object(soap, NULL, p, "IDSP:Object"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct IDSP__Object *)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__ObjectList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__ObjectList, 0, sizeof(struct IDSP__ObjectList), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__ObjectList * SOAP_FMAC6 soap_new_IDSP__ObjectList(struct soap *soap, int n)
{	return soap_instantiate_IDSP__ObjectList(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__ObjectList(struct soap *soap, struct IDSP__ObjectList *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__ObjectList * SOAP_FMAC4 soap_instantiate_IDSP__ObjectList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__ObjectList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__ObjectList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__ObjectList;
		if (size)
			*size = sizeof(struct IDSP__ObjectList);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__ObjectList[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__ObjectList);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__ObjectList*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__ObjectList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__ObjectList %p -> %p\n", q, p));
	*(struct IDSP__ObjectList*)p = *(struct IDSP__ObjectList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__Object(struct soap *soap, struct IDSP__Object *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->specifierData = NULL;
	soap_default_unsignedLong(soap, &a->objectType);
	soap_default_unsignedLong(soap, &a->specifierForm);
	a->start = NULL;
	a->end = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__Object(struct soap *soap, const struct IDSP__Object *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->specifierData, a->__type);
	soap_serialize_PointerToIDSP__Object(soap, &a->start);
	soap_serialize_PointerToIDSP__Object(soap, &a->end);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__Object(struct soap *soap, const struct IDSP__Object *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__Object);
	if (soap_out_IDSP__Object(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__Object(struct soap *soap, const char *tag, int id, const struct IDSP__Object *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IDSP__Object), type))
		return soap->error;
	if (soap_putelement(soap, a->specifierData, "specifierData", -1, a->__type))
		return soap->error;
	if (soap_out_unsignedLong(soap, "objectType", -1, &a->objectType, ""))
		return soap->error;
	if (soap_out_unsignedLong(soap, "specifierForm", -1, &a->specifierForm, ""))
		return soap->error;
	if (soap_out_PointerToIDSP__Object(soap, "start", -1, &a->start, ""))
		return soap->error;
	if (soap_out_PointerToIDSP__Object(soap, "end", -1, &a->end, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__Object * SOAP_FMAC4 soap_get_IDSP__Object(struct soap *soap, struct IDSP__Object *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__Object(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__Object * SOAP_FMAC4 soap_in_IDSP__Object(struct soap *soap, const char *tag, struct IDSP__Object *a, const char *type)
{
	short soap_flag_specifierData = 1, soap_flag_objectType = 1, soap_flag_specifierForm = 1, soap_flag_start = 1, soap_flag_end = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct IDSP__Object *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__Object, sizeof(struct IDSP__Object), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__Object(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_specifierData && soap->error == SOAP_TAG_MISMATCH)
				if ((a->specifierData = soap_getelement(soap, &a->__type)))
				{	soap_flag_specifierData = 0;
					continue;
				}
			if (soap_flag_objectType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "objectType", &a->objectType, "xsd:unsignedLong"))
				{	soap_flag_objectType--;
					continue;
				}
			if (soap_flag_specifierForm && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLong(soap, "specifierForm", &a->specifierForm, "xsd:unsignedLong"))
				{	soap_flag_specifierForm--;
					continue;
				}
			if (soap_flag_start && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToIDSP__Object(soap, "start", &a->start, "IDSP:Object"))
				{	soap_flag_start--;
					continue;
				}
			if (soap_flag_end && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToIDSP__Object(soap, "end", &a->end, "IDSP:Object"))
				{	soap_flag_end--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__Object *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__Object, 0, sizeof(struct IDSP__Object), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_specifierData > 1 || soap_flag_objectType > 0 || soap_flag_specifierForm > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__Object * SOAP_FMAC6 soap_new_IDSP__Object(struct soap *soap, int n)
{	return soap_instantiate_IDSP__Object(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__Object(struct soap *soap, struct IDSP__Object *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__Object * SOAP_FMAC4 soap_instantiate_IDSP__Object(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__Object(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__Object, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__Object;
		if (size)
			*size = sizeof(struct IDSP__Object);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__Object[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__Object);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__Object*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__Object(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__Object %p -> %p\n", q, p));
	*(struct IDSP__Object*)p = *(struct IDSP__Object*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__List(struct soap *soap, struct IDSP__List *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__List(struct soap *soap, struct IDSP__List const*a)
{
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_IDSP__List))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_IDSP__Data);
			soap_serialize_IDSP__Data(soap, a->__ptr + i);
		}
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__List(struct soap *soap, const struct IDSP__List *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_IDSP__List);
	if (soap_out_IDSP__List(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__List(struct soap *soap, const char *tag, int id, const struct IDSP__List *a, const char *type)
{
	int i, n = a->__size;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_IDSP__List);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap_out_IDSP__Data(soap, "item", -1, &a->__ptr[i], "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__List * SOAP_FMAC4 soap_get_IDSP__List(struct soap *soap, struct IDSP__List *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__List(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__List * SOAP_FMAC4 soap_in_IDSP__List(struct soap *soap, const char *tag, struct IDSP__List *a, const char *type)
{	int i, j;
	struct IDSP__Data *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_array(soap, "IDSP:Data") && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct IDSP__List *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__List, sizeof(struct IDSP__List), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__List(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = (struct IDSP__Data *)soap_malloc(soap, sizeof(struct IDSP__Data) * a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_IDSP__Data(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_IDSP__Data(soap, NULL, a->__ptr + i, "IDSP:Data"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (struct IDSP__Data *)soap_push_block(soap, sizeof(struct IDSP__Data));
				if (!p)
					return NULL;
				soap_default_IDSP__Data(soap, p);
				if (!soap_in_IDSP__Data(soap, NULL, p, "IDSP:Data"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptr = (struct IDSP__Data *)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__List *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__List, 0, sizeof(struct IDSP__List), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__List * SOAP_FMAC6 soap_new_IDSP__List(struct soap *soap, int n)
{	return soap_instantiate_IDSP__List(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__List(struct soap *soap, struct IDSP__List *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__List * SOAP_FMAC4 soap_instantiate_IDSP__List(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__List(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__List, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__List;
		if (size)
			*size = sizeof(struct IDSP__List);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__List[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__List);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__List*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__List(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__List %p -> %p\n", q, p));
	*(struct IDSP__List*)p = *(struct IDSP__List*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__Data(struct soap *soap, struct IDSP__Data *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->data = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__Data(struct soap *soap, const struct IDSP__Data *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->data, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__Data(struct soap *soap, const struct IDSP__Data *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__Data);
	if (soap_out_IDSP__Data(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__Data(struct soap *soap, const char *tag, int id, const struct IDSP__Data *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IDSP__Data), type))
		return soap->error;
	if (soap_putelement(soap, a->data, "data", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__Data * SOAP_FMAC4 soap_get_IDSP__Data(struct soap *soap, struct IDSP__Data *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__Data(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__Data * SOAP_FMAC4 soap_in_IDSP__Data(struct soap *soap, const char *tag, struct IDSP__Data *a, const char *type)
{
	short soap_flag_data = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct IDSP__Data *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__Data, sizeof(struct IDSP__Data), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__Data(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_data && soap->error == SOAP_TAG_MISMATCH)
				if ((a->data = soap_getelement(soap, &a->__type)))
				{	soap_flag_data = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__Data *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__Data, 0, sizeof(struct IDSP__Data), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_data > 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__Data * SOAP_FMAC6 soap_new_IDSP__Data(struct soap *soap, int n)
{	return soap_instantiate_IDSP__Data(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__Data(struct soap *soap, struct IDSP__Data *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__Data * SOAP_FMAC4 soap_instantiate_IDSP__Data(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__Data(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__Data, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__Data;
		if (size)
			*size = sizeof(struct IDSP__Data);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__Data[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__Data);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__Data*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__Data(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__Data %p -> %p\n", q, p));
	*(struct IDSP__Data*)p = *(struct IDSP__Data*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP__RunScriptParameters(struct soap *soap, struct IDSP__RunScriptParameters *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->scriptText);
	soap_default_string(soap, &a->scriptLanguage);
	soap_default_string(soap, &a->scriptFile);
	a->scriptArgs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP__RunScriptParameters(struct soap *soap, const struct IDSP__RunScriptParameters *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->scriptText);
	soap_serialize_string(soap, &a->scriptLanguage);
	soap_serialize_string(soap, &a->scriptFile);
	soap_serialize_PointerTostd__vectorTemplateOfIDSP_ScriptArg(soap, &a->scriptArgs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP__RunScriptParameters(struct soap *soap, const struct IDSP__RunScriptParameters *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP__RunScriptParameters);
	if (soap_out_IDSP__RunScriptParameters(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP__RunScriptParameters(struct soap *soap, const char *tag, int id, const struct IDSP__RunScriptParameters *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IDSP__RunScriptParameters), type))
		return soap->error;
	if (soap_out_string(soap, "scriptText", -1, &a->scriptText, ""))
		return soap->error;
	if (soap_out_string(soap, "scriptLanguage", -1, &a->scriptLanguage, ""))
		return soap->error;
	if (soap_out_string(soap, "scriptFile", -1, &a->scriptFile, ""))
		return soap->error;
	if (soap_out_PointerTostd__vectorTemplateOfIDSP_ScriptArg(soap, "scriptArgs", -1, &a->scriptArgs, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP__RunScriptParameters * SOAP_FMAC4 soap_get_IDSP__RunScriptParameters(struct soap *soap, struct IDSP__RunScriptParameters *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP__RunScriptParameters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__RunScriptParameters * SOAP_FMAC4 soap_in_IDSP__RunScriptParameters(struct soap *soap, const char *tag, struct IDSP__RunScriptParameters *a, const char *type)
{
	short soap_flag_scriptText = 1, soap_flag_scriptLanguage = 1, soap_flag_scriptFile = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct IDSP__RunScriptParameters *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP__RunScriptParameters, sizeof(struct IDSP__RunScriptParameters), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_IDSP__RunScriptParameters(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_scriptText && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "scriptText", &a->scriptText, "xsd:string"))
				{	soap_flag_scriptText--;
					continue;
				}
			if (soap_flag_scriptLanguage && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "scriptLanguage", &a->scriptLanguage, "xsd:string"))
				{	soap_flag_scriptLanguage--;
					continue;
				}
			if (soap_flag_scriptFile && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "scriptFile", &a->scriptFile, "xsd:string"))
				{	soap_flag_scriptFile--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTostd__vectorTemplateOfIDSP_ScriptArg(soap, "scriptArgs", &a->scriptArgs, "IDSP-ScriptArg"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP__RunScriptParameters *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP__RunScriptParameters, 0, sizeof(struct IDSP__RunScriptParameters), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP__RunScriptParameters * SOAP_FMAC6 soap_new_IDSP__RunScriptParameters(struct soap *soap, int n)
{	return soap_instantiate_IDSP__RunScriptParameters(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP__RunScriptParameters(struct soap *soap, struct IDSP__RunScriptParameters *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP__RunScriptParameters * SOAP_FMAC4 soap_instantiate_IDSP__RunScriptParameters(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP__RunScriptParameters(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP__RunScriptParameters, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP__RunScriptParameters;
		if (size)
			*size = sizeof(struct IDSP__RunScriptParameters);
	}
	else
	{	cp->ptr = (void*)new struct IDSP__RunScriptParameters[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP__RunScriptParameters);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP__RunScriptParameters*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP__RunScriptParameters(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP__RunScriptParameters %p -> %p\n", q, p));
	*(struct IDSP__RunScriptParameters*)p = *(struct IDSP__RunScriptParameters*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_IDSP_ScriptArg(struct soap *soap, struct IDSP_ScriptArg *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->name);
	soap_default_std__string(soap, &a->value);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_IDSP_ScriptArg(struct soap *soap, const struct IDSP_ScriptArg *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->name);
	soap_serialize_std__string(soap, &a->value);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_IDSP_ScriptArg(struct soap *soap, const struct IDSP_ScriptArg *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_IDSP_ScriptArg);
	if (soap_out_IDSP_ScriptArg(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_IDSP_ScriptArg(struct soap *soap, const char *tag, int id, const struct IDSP_ScriptArg *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_IDSP_ScriptArg), type))
		return soap->error;
	if (soap_out_std__string(soap, "name", -1, &a->name, ""))
		return soap->error;
	if (soap_out_std__string(soap, "value", -1, &a->value, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct IDSP_ScriptArg * SOAP_FMAC4 soap_get_IDSP_ScriptArg(struct soap *soap, struct IDSP_ScriptArg *p, const char *tag, const char *type)
{
	if ((p = soap_in_IDSP_ScriptArg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP_ScriptArg * SOAP_FMAC4 soap_in_IDSP_ScriptArg(struct soap *soap, const char *tag, struct IDSP_ScriptArg *a, const char *type)
{
	short soap_flag_name = 1, soap_flag_value = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct IDSP_ScriptArg *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_IDSP_ScriptArg, sizeof(struct IDSP_ScriptArg), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_IDSP_ScriptArg(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name--;
					continue;
				}
			if (soap_flag_value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "value", &a->value, "xsd:string"))
				{	soap_flag_value--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct IDSP_ScriptArg *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_IDSP_ScriptArg, 0, sizeof(struct IDSP_ScriptArg), 0, soap_copy_IDSP_ScriptArg);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_name > 0 || soap_flag_value > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 struct IDSP_ScriptArg * SOAP_FMAC6 soap_new_IDSP_ScriptArg(struct soap *soap, int n)
{	return soap_instantiate_IDSP_ScriptArg(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_IDSP_ScriptArg(struct soap *soap, struct IDSP_ScriptArg *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct IDSP_ScriptArg * SOAP_FMAC4 soap_instantiate_IDSP_ScriptArg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_IDSP_ScriptArg(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_IDSP_ScriptArg, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct IDSP_ScriptArg;
		if (size)
			*size = sizeof(struct IDSP_ScriptArg);
	}
	else
	{	cp->ptr = (void*)new struct IDSP_ScriptArg[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct IDSP_ScriptArg);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct IDSP_ScriptArg*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_IDSP_ScriptArg(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct IDSP_ScriptArg %p -> %p\n", q, p));
	*(struct IDSP_ScriptArg*)p = *(struct IDSP_ScriptArg*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToIDSP__Result(struct soap *soap, struct IDSP__Result *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_IDSP__Result))
		soap_serialize_IDSP__Result(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToIDSP__Result(struct soap *soap, struct IDSP__Result *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToIDSP__Result);
	if (soap_out_PointerToIDSP__Result(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToIDSP__Result(struct soap *soap, const char *tag, int id, struct IDSP__Result *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_IDSP__Result);
	if (id < 0)
		return soap->error;
	return soap_out_IDSP__Result(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct IDSP__Result ** SOAP_FMAC4 soap_get_PointerToIDSP__Result(struct soap *soap, struct IDSP__Result **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToIDSP__Result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__Result ** SOAP_FMAC4 soap_in_PointerToIDSP__Result(struct soap *soap, const char *tag, struct IDSP__Result **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct IDSP__Result **)soap_malloc(soap, sizeof(struct IDSP__Result *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_IDSP__Result(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct IDSP__Result **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_IDSP__Result, sizeof(struct IDSP__Result), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToIDSP__RunScriptParameters(struct soap *soap, struct IDSP__RunScriptParameters *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_IDSP__RunScriptParameters))
		soap_serialize_IDSP__RunScriptParameters(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToIDSP__RunScriptParameters(struct soap *soap, struct IDSP__RunScriptParameters *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToIDSP__RunScriptParameters);
	if (soap_out_PointerToIDSP__RunScriptParameters(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToIDSP__RunScriptParameters(struct soap *soap, const char *tag, int id, struct IDSP__RunScriptParameters *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_IDSP__RunScriptParameters);
	if (id < 0)
		return soap->error;
	return soap_out_IDSP__RunScriptParameters(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct IDSP__RunScriptParameters ** SOAP_FMAC4 soap_get_PointerToIDSP__RunScriptParameters(struct soap *soap, struct IDSP__RunScriptParameters **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToIDSP__RunScriptParameters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__RunScriptParameters ** SOAP_FMAC4 soap_in_PointerToIDSP__RunScriptParameters(struct soap *soap, const char *tag, struct IDSP__RunScriptParameters **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct IDSP__RunScriptParameters **)soap_malloc(soap, sizeof(struct IDSP__RunScriptParameters *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_IDSP__RunScriptParameters(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct IDSP__RunScriptParameters **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_IDSP__RunScriptParameters, sizeof(struct IDSP__RunScriptParameters), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToIDSP__Field(struct soap *soap, struct IDSP__Field *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_IDSP__Field))
		soap_serialize_IDSP__Field(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToIDSP__Field(struct soap *soap, struct IDSP__Field *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToIDSP__Field);
	if (soap_out_PointerToIDSP__Field(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToIDSP__Field(struct soap *soap, const char *tag, int id, struct IDSP__Field *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_IDSP__Field);
	if (id < 0)
		return soap->error;
	return soap_out_IDSP__Field(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct IDSP__Field ** SOAP_FMAC4 soap_get_PointerToIDSP__Field(struct soap *soap, struct IDSP__Field **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToIDSP__Field(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__Field ** SOAP_FMAC4 soap_in_PointerToIDSP__Field(struct soap *soap, const char *tag, struct IDSP__Field **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct IDSP__Field **)soap_malloc(soap, sizeof(struct IDSP__Field *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_IDSP__Field(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct IDSP__Field **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_IDSP__Field, sizeof(struct IDSP__Field), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToIDSP__Object(struct soap *soap, struct IDSP__Object *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_IDSP__Object))
		soap_serialize_IDSP__Object(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToIDSP__Object(struct soap *soap, struct IDSP__Object *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToIDSP__Object);
	if (soap_out_PointerToIDSP__Object(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToIDSP__Object(struct soap *soap, const char *tag, int id, struct IDSP__Object *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_IDSP__Object);
	if (id < 0)
		return soap->error;
	return soap_out_IDSP__Object(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct IDSP__Object ** SOAP_FMAC4 soap_get_PointerToIDSP__Object(struct soap *soap, struct IDSP__Object **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToIDSP__Object(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__Object ** SOAP_FMAC4 soap_in_PointerToIDSP__Object(struct soap *soap, const char *tag, struct IDSP__Object **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct IDSP__Object **)soap_malloc(soap, sizeof(struct IDSP__Object *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_IDSP__Object(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct IDSP__Object **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_IDSP__Object, sizeof(struct IDSP__Object), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToIDSP__Data(struct soap *soap, struct IDSP__Data *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_IDSP__Data))
		soap_serialize_IDSP__Data(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToIDSP__Data(struct soap *soap, struct IDSP__Data *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToIDSP__Data);
	if (soap_out_PointerToIDSP__Data(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToIDSP__Data(struct soap *soap, const char *tag, int id, struct IDSP__Data *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_IDSP__Data);
	if (id < 0)
		return soap->error;
	return soap_out_IDSP__Data(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct IDSP__Data ** SOAP_FMAC4 soap_get_PointerToIDSP__Data(struct soap *soap, struct IDSP__Data **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToIDSP__Data(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct IDSP__Data ** SOAP_FMAC4 soap_in_PointerToIDSP__Data(struct soap *soap, const char *tag, struct IDSP__Data **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct IDSP__Data **)soap_malloc(soap, sizeof(struct IDSP__Data *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_IDSP__Data(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct IDSP__Data **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_IDSP__Data, sizeof(struct IDSP__Data), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, std::vector<struct IDSP_ScriptArg >*const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__vectorTemplateOfIDSP_ScriptArg))
		soap_serialize_std__vectorTemplateOfIDSP_ScriptArg(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, std::vector<struct IDSP_ScriptArg >*const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__vectorTemplateOfIDSP_ScriptArg);
	if (soap_out_PointerTostd__vectorTemplateOfIDSP_ScriptArg(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, const char *tag, int id, std::vector<struct IDSP_ScriptArg >*const*a, const char *type)
{
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	return soap_out_std__vectorTemplateOfIDSP_ScriptArg(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::vector<struct IDSP_ScriptArg >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, std::vector<struct IDSP_ScriptArg >**p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__vectorTemplateOfIDSP_ScriptArg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::vector<struct IDSP_ScriptArg >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, const char *tag, std::vector<struct IDSP_ScriptArg >**a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	soap_revert(soap);
	if (!a)
		if (!(a = (std::vector<struct IDSP_ScriptArg >**)soap_malloc(soap, sizeof(std::vector<struct IDSP_ScriptArg >*))))
			return NULL;
	if (!(*a = soap_in_std__vectorTemplateOfIDSP_ScriptArg(soap, tag, *a, type)))
		return NULL;
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__dateTime(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__dateTime(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__dateTime(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__dateTime);
	if (soap_out_xsd__dateTime(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__dateTime);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__dateTime, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__anyURI);
	if (soap_out_xsd__anyURI(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__anyURI, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__string(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (soap_out_xsd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, std::vector<struct IDSP_ScriptArg >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, const std::vector<struct IDSP_ScriptArg >*a)
{
	for (std::vector<struct IDSP_ScriptArg >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_IDSP_ScriptArg(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, const char *tag, int id, const std::vector<struct IDSP_ScriptArg >*a, const char *type)
{
	for (std::vector<struct IDSP_ScriptArg >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_IDSP_ScriptArg(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<struct IDSP_ScriptArg >* SOAP_FMAC4 soap_in_std__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, const char *tag, std::vector<struct IDSP_ScriptArg >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfIDSP_ScriptArg(soap, -1)))
		return NULL;
	struct IDSP_ScriptArg n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		soap_default_IDSP_ScriptArg(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_IDSP_ScriptArg, SOAP_TYPE_std__vectorTemplateOfIDSP_ScriptArg, sizeof(struct IDSP_ScriptArg), 0))
				break;
			if (!soap_in_IDSP_ScriptArg(soap, tag, NULL, "IDSP-ScriptArg"))
				break;
		}
		else
		{
			if (!soap_in_IDSP_ScriptArg(soap, tag, &n, "IDSP-ScriptArg"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<struct IDSP_ScriptArg > * SOAP_FMAC6 soap_new_std__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfIDSP_ScriptArg(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, std::vector<struct IDSP_ScriptArg >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<struct IDSP_ScriptArg > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfIDSP_ScriptArg(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfIDSP_ScriptArg, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<struct IDSP_ScriptArg >;
		if (size)
			*size = sizeof(std::vector<struct IDSP_ScriptArg >);
	}
	else
	{	cp->ptr = (void*)new std::vector<struct IDSP_ScriptArg >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<struct IDSP_ScriptArg >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<struct IDSP_ScriptArg >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfIDSP_ScriptArg(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<struct IDSP_ScriptArg > %p -> %p\n", q, p));
	*(std::vector<struct IDSP_ScriptArg >*)p = *(std::vector<struct IDSP_ScriptArg >*)q;
}

/* End of soapC.cpp */
