//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/public/components/server/gsoap/soapClient.cpp $
//  
//  Owner: ???
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//  
//  soapClient.cpp
//  Generated by gSOAP 2.7.9l from /Users/lmillett/thyme/source/components/soapserver/server/SSLibFunctions.h
//  Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
//  This part of the software is released under one of the following licenses:
//  GPL, the gSOAP public license, or Genivia's license for commercial use.
//  
//========================================================================================

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.9l 2011-12-09 12:08:26 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_IDSP__RunScript(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct IDSP__RunScriptParameters *runScriptParameters, struct IDSP__RunScriptResponse &runScriptResponse)
{	struct IDSP__RunScript soap_tmp_IDSP__RunScript;
	soap->encodingStyle = NULL;
	soap_tmp_IDSP__RunScript.runScriptParameters = runScriptParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_IDSP__RunScript(soap, &soap_tmp_IDSP__RunScript);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_IDSP__RunScript(soap, &soap_tmp_IDSP__RunScript, "IDSP:RunScript", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_IDSP__RunScript(soap, &soap_tmp_IDSP__RunScript, "IDSP:RunScript", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_IDSP__RunScriptResponse(soap, &runScriptResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_IDSP__RunScriptResponse(soap, &runScriptResponse, "IDSP:RunScriptResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_IDSP__BeginSession(struct soap *soap, const char *soap_endpoint, const char *soap_action, unsigned int &sessionID)
{	struct IDSP__BeginSession soap_tmp_IDSP__BeginSession;
	struct IDSP__BeginSessionResponse *soap_tmp_IDSP__BeginSessionResponse;
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_IDSP__BeginSession(soap, &soap_tmp_IDSP__BeginSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_IDSP__BeginSession(soap, &soap_tmp_IDSP__BeginSession, "IDSP:BeginSession", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_IDSP__BeginSession(soap, &soap_tmp_IDSP__BeginSession, "IDSP:BeginSession", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_IDSP__SessionID(soap, &sessionID);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_IDSP__BeginSessionResponse = soap_get_IDSP__BeginSessionResponse(soap, NULL, "IDSP:BeginSessionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	sessionID = soap_tmp_IDSP__BeginSessionResponse->sessionID;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_IDSP__EndSession(struct soap *soap, const char *soap_endpoint, const char *soap_action, unsigned int sessionID, struct IDSP__Result *result)
{	struct IDSP__EndSession soap_tmp_IDSP__EndSession;
	soap->encodingStyle = NULL;
	soap_tmp_IDSP__EndSession.sessionID = sessionID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_IDSP__EndSession(soap, &soap_tmp_IDSP__EndSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_IDSP__EndSession(soap, &soap_tmp_IDSP__EndSession, "IDSP:EndSession", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_IDSP__EndSession(soap, &soap_tmp_IDSP__EndSession, "IDSP:EndSession", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_IDSP__Result(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_IDSP__Result(soap, result, "IDSP:Result", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

/* End of soapClient.cpp */
