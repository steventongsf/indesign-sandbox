//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/public/interfaces/ui/ICSXSPlugPlugEventHandler.h $
//  
//  Owner: Gaurav Bhargava
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  ADOBE CONFIDENTIAL
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  All information contained herein is, and remains
//  the property of Adobe Systems Incorporated and its suppliers,
//  if any.  The intellectual and technical concepts contained
//  herein are proprietary to Adobe Systems Incorporated and its
//  suppliers and may be covered by U.S. and Foreign Patents,
//  patents in process, and are protected by trade secret or copyright law.
//  Dissemination of this information or reproduction of this material
//  is strictly forbidden unless prior written permission is obtained
//  from Adobe Systems Incorporated.
//  
//========================================================================================

#pragma once
#ifndef __ICSXSPlugPlugEventHandler__
#define __ICSXSPlugPlugEventHandler__

#include "IPMUnknown.h"
#include "CSXSID.h"

#define kIDEnigmaCode "IDSN"
#define kICEnigmaCode "AICY"

class ICSXSPlugPlugEventHandler : public IPMUnknown
{
public:
	enum { kDefaultIID = IID_ICSXSPLUGPLUG } ;

	enum CSXSEventScope
	{
		/**
		OBSOLETE: Please use vulcan messages for sending messages
		to all available applications. (See ICSXSVulcanMessageHandler)
		Events with this scope are dispatched to all available
		applications and all native listeners.
		**/
		//kEventScope_Global = 0,

		/**
		Events with this scope are dispatched only within the application
		in which the event was generated.
		**/
		kEventScope_Application = 1,

		kEventScope_LastValue = 0x7FFFFFFF
	};

	enum CSXSEventErrorCode
	{
		 /** Success. **/
		kEventErrorCode_Success = 0,

		/** Failure of a known type. **/
		kEventErrorCode_OperationFailed,

		/** Failure of an unknown type. **/
		kEventErrorCode_Unknown,				
				
		kEventErrorCode_LastValue = 0x7FFFFFFF
	};

	struct CSXSEvent 
	{
		/** The type of the event. **/
		const char* type;
		/** The scope of the event. **/
		CSXSEventScope scope;
		/** The unique identifier of the application that generated the event.
		This is assigned internally. **/
		const char* appId;
		/** The unique identifier of the extension that generated the event,
		or NULL if the event was not generated by an extension. **/
		const char* extensionId;
		/** The event specific data. **/
		const char* data;
		CSXSEvent() : data(nil), extensionId(nil), appId(nil), type(nil), scope(kEventScope_Application)
		{}
		CSXSEvent(const CSXSEvent& other) = default;
	};

	typedef void (*EventListenerFn) (const CSXSEvent* const csxsEvent, void* const context);

	/** Adds the given eventListener to the list of plugplug listener for the given type.

	@param type The type of events to register for. Must not be NULL.                         
	@param eventListener The event listener to add.
	@param context A user specific context pointer or NULL.
	@return The error code for this operation.
	**/
	virtual CSXSEventErrorCode AddPlugPlugEventListener(const char* type, EventListenerFn eventListener, void* const context ) = 0 ;

	
	/** Removes the given eventListener from the list of plugplug listener for the given type.

	* @param eventListener The event listener to remove.
	* @param context The user specific context pointer the event listener was registered with or NULL.
	* @return The error code for this operation. 
	*/
	virtual CSXSEventErrorCode RemovePlugPlugEventListener(const char* type, EventListenerFn eventListener, void* const context ) = 0 ;

	
	/** Dispatches the given event. 

	@param The event to dispatch.
	@return The error code for this operation. 

	This method will notify all event listeners which have registered for the type of the
	event plus all event listeners which have registered for all events. The order in 
	which the listeners are notified is undeterministic.
	**/
	virtual CSXSEventErrorCode DispatchPlugPlugEvent(const CSXSEvent * const csxsEvent) const = 0;

} ;

#endif
