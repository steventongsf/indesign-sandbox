//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/public/interfaces/ui/IComboBoxCalculatedValue.h $
//  
//  Owner: lance bushore
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#pragma once
#ifndef __IComboBoxCalculatedValue__
#define __IComboBoxCalculatedValue__

#include "IPMUnknown.h"
#include "widgetid.h"


/**  This interface exists to deal with combobox entries which support calculated values(i.e. 'Auto'). The methods allow us to
	 figure out what we should display in the editbox. Typically it is either the name of the calculation system, such as 'Auto', 
	 or a value generated by the calculation system, like 14.4, which we will display as '(14.4)' so the user knows it is calculated.
	 However, the calculated string could be anything, and there could be multiple calculation systems in a single combobox. The core
	 UI code for comboboxes will call into this interface to gain information about calculated values. Implementors of new calculation 
	 systems would need to implement this interface and add it to their combobox boss.
*/
class IComboBoxCalculatedValue : public IPMUnknown
{
public:	
	enum { kDefaultIID = IID_ICOMBOBOXCALCULATEDVALUE };

	/** Called to notify this interface that the user has chosen something, either by typing it in the editbox, or choosing an
		item from the drop down. Most implementations ignore this, but if your impl supports multiple calculation systems, 
		this can be useful for keeping track of which is selected.
		@param string The string for the new text in the editbox. This might come from an entry in the dropdown.
	*/
	virtual void		UserChoseItem(const PMString & string) = 0;
	
	/** This method should return whether or not this is a mixed state(if it is a mixed state, we put the calculated string returned by GetCalculatedString() in the editbox.
		 Otherwise we ask for a value from GetCalculatedValue()). An example would be if text of 2 different point sizes was selected, but all the text used 'Auto' leading. 
		 IsMixedState() would return kTrue in this case.
		@return kTrue if the combobox is in a mixed calculated state
	*/
	virtual bool16		IsMixedState() const = 0;
	
	/** Get the current calculated value to display in the editbox(i.e. 14.4). Value is in points if this is some sort of measurement combobox.
		@return the calculated value
	*/
	virtual PMReal		GetCalculatedValue() const = 0;
	
	/** Get the name of the calculation system(often 'Auto')
		@return the string for the calculation system
	*/
	virtual PMString	GetCalculatedString() const = 0;
	
	/** Is the string passed in a legal calculated string? This is often a string the user has typed in.
		@param stringToCheck the string to be verified
		@return kTrue if the string describes a legal calculation system
	*/
	virtual bool16		IsLegalCalculatedString(const PMString & stringToCheck) const = 0;
};	



#endif // __IComboBoxCalculatedValue__
