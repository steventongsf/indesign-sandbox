//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/public/interfaces/graphics/IPDFExportController.h $
//  
//  Owner: Tommy Donovan
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//  
//  Purpose of interface
//  IPDFExportController is used in the PDFExportCmdBoss to control, via events,
//  which pages are printed.
//  
//========================================================================================

#pragma once
#ifndef __IPDFEXPORTCONTROLLER__
#define __IPDFEXPORTCONTROLLER__

#include "IPMUnknown.h"
class IViewPort;
class IDataBase;

/**
 Error codes returned by various methods in IPDFExportController.
 */
typedef uint32 PDFExportErr;
enum
{
	/// Operation succeeded without error
	kPDFExportErrSuccess = 0,
	/// The export controller is already started up
	kPDFExportErrAlreadyStartedUp,
	/// The export controller has been shut down, or has not been started up
	kPDFExportErrAlreadyShutDown,
	/// The export view port could not be created
	kPDFExportErrNoViewPort,
	/// The destination file is already open
	kPDFExportErrFileAlreadyOpen,
	/// The destination file is locked and cannot be overwritten
	kPDFExportErrFileLocked,
	/// An unknown error occurred
	kPDFExportErrUnknownFailure,
	/// An error occurred while creating the output stream
	kPDFExportErrStreamCreationFailure
};

/**
 Export Event IDs used to determine the context for the events returned by IPDFExportController::GetNextPDFExportEvent.
 */
typedef uint32 PDFExportEventID;
enum
{
	/// Event sent at the beginning of the export session
	kPDFExportEventBeginExport = 0,
	/// Event sent when the specified page should be drawn
	kPDFExportEventDrawPage,
	/// Event sent when the specified spread should be drawn
	kPDFExportEventDrawSpread,
	/// Event sent when the specified page item should be drawn
	kPDFExportEventDrawItem,
	/// Event sent at the end of the export session
	kPDFExportEventEndExport,
	/// Event sent when the database has changed since the last event
	kPDFExportEventNewDocument,
	/// InCopy only: Event sent when the specified galley page should be drawn
	kPDFExportEventDrawGalleyPage
};

/** Definition of the export event generated by IPDFExportController::GetNextPDFExportEvent.
*/
typedef struct _t_PDFExportEvent {
	/** The ID for the event
	*/
	PDFExportEventID		id;
	/** The viewport to export to
	*/
	IViewPort*				targetPort;
	/**
	The database for the page, spread, or page item to draw. May change from one event to the 
	next if pages/spreads from multiple documents are exported in the same export session
	*/
	IDataBase*				db;
	/** UID for the page, spread, or page item to draw
	*/
	UID						curUID;
} PDFExportEvent;

/**
IPDFExportController defines the interface for an event-driven PDF export. It is used by clients 
such as the PDF export command to handle the logic for the sequence of events and the set up 
required for each. Clients pass in an event structure that is filled in by the controller with 
the type of the event, the viewport to render content into, the database for the current page, 
and the UID of the page or spread to render.
*/
class IPDFExportController : public IPMUnknown
{
public:
		/**
		Initializes an event driven export session. Must be called prior to calling GetNextPDFExportEvent 
		or ShutDown. If bExportPageItems is kTrue, the ItemList contains page items, and is NOT a list of pages.
		@param bExportPageItems	Indicates whether exporting pageitems (kTrue) or pages/spreads (kFalse)
		@return an error code describing the success or failure of the start up
		*/
		virtual PDFExportErr StartUp(bool16 bExportPageItems = kFalse) = 0;
		
		/**
		Gets the next event of the export session.
		@param nextEvent	Pointer to event structure to be filled in
		@return an error code describing the success or failure of the start up
		*/
		virtual PDFExportErr GetNextPDFExportEvent(PDFExportEvent* nextEvent) = 0;

		/**
		Closes down an event-driven export session and saves the document if bSaveIt is kTrue.
		@param bSaveIt	kTrue if the document should be saved, else kFalse
		@return an error code describing the success or failure of the shut down
		*/
		virtual PDFExportErr ShutDown(bool16 bSaveIt = kTrue) = 0;

		/**
		Returns a string describing the current state of the export, for display in a progress bar.
		*/
		virtual PMString GetCurrentProgressBarText() = 0;

		/**
		Returns a PDF export event based on the event type passed.
		@param exportEvent Pointer to the event structure to be filled in.
		@param eventType Identifier for the type of event to get in the event.
		@param currIndex Index of the current page or spread being exported.
		*/
		virtual bool16 MakePDFExportEvent(PDFExportEvent *exportEvent, uint32 eventType, int32 currIndex) = 0;
};

#endif
