//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/public/interfaces/graphics/IPhotoshopClippingPath.h $
//  
//  Owner: dstephen
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//  
//  Description:  This Interface was designed for the purpose of exposing the TIFFClippingPath
//  code from the Image plugin.  Photoshop images have a series of '8BIM' records/resources
//  stored in different places depending on the image type.  Once located and decoded using
//  ConvertPSResourcesToPMTags(), the result can be passed to the TIFFClippingPath implementation
//  to create a polygon.
//  
//========================================================================================

#pragma once
#ifndef __IClippingPath__
#define __IClippingPath__

#include "IPMUnknown.h"

class PathOutlineInfo;

/** This interface is used to parse the '8BIM' resource generated by Photoshop and placed
in various image formats, into a PathOutlineInfo polygon.
@see PathOutlineInfo
*/
class IPhotoshopClippingPath : public IPMUnknown
{
public:
	/** This method does all the work.
		@param pPathData - IN: Should be const.  Pointer to the source data.
		@param dataLength - IN: Number of bytes in source data pointed at by pPathData
		@param pPolygon - OUT: The resulting polygon.
		@param xScaleFactor - IN: An x scale factor to apply to each point in the path.
		@param yScaleFactor - IN: A y scale factor to apply to each point in the path.
		@param xOffset - IN: A horizontal offset to apply to each point in the path after the scale is applied.
		@param yOffset - IN: A vertical offset to apply to each point in the path after the scale is applied.
	*/
	virtual ErrorCode Parse (uint8* pPathData, 
				  uint32 dataLength,
				  PathOutlineInfo *pPolygon,
				  const PMReal& xScaleFactor, 
				  const PMReal& yScaleFactor,
				  const PMReal& xOffset,
				  const PMReal& yOffset) = 0;

	/** This method should be private.  Clients have no need to call this method.
	*/
	virtual int32 Length() const = 0;
};

#endif
