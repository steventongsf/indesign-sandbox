//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/sdksamples/typekitinspector/TKI.fr $
//  
//  Owner: Timothy Brand-Spencer
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2012 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "VCPlugInHeaders.h"

// General includes:
#include "MenuDef.fh"
#include "ActionDef.fh"
#include "ActionDefs.h"
#include "AdobeMenuPositions.h"
#include "LocaleIndex.h"
#include "PMLocaleIds.h"
#include "StringTable.fh"
#include "ObjectModelTypes.fh"
#include "ShuksanID.h"
#include "ActionID.h"
#include "CommandID.h"
#include "WorkspaceID.h"
#include "WidgetID.h"
#include "BuildNumber.h"
#include "PlugInModel_UIAttributes.h"
#include "PanelList.fh"
#include "InterfaceColorDefines.h"
#include "IControlViewDefs.h"
#include "SysControlIDs.h"
#include "Widgets.fh"	// for PalettePanelWidget or DialogBoss
#include "TKIID.h"
#include "GenericID.h"
#include "ShuksanID.h"
#include "TextID.h"
#include "TreeViewDefs.h"

#ifdef __ODFRC__

/*  
 * Plugin version definition.
 */
resource PluginVersion (kSDKDefPluginVersionResourceID)
{
	kTargetVersion,
	kTKIPluginID,
	kSDKDefPlugInMajorVersionNumber, kSDKDefPlugInMinorVersionNumber,
	kSDKDefHostMajorVersionNumber, kSDKDefHostMinorVersionNumber,
	kTKICurrentMajorFormatNumber, kTKICurrentMinorFormatNumber,
	{ kInDesignProduct },
	{ kWildFS },
	kUIPlugIn,
	kTKIVersion
};

/*  
 * The ExtraPluginInfo resource adds extra information to the Missing Plug-in dialog
 * that is popped when a document containing this plug-in's data is opened when
 * this plug-in is not present. These strings are not translatable strings
 * since they must be available when the plug-in isn't around. They get stored
 * in any document that this plug-in contributes data to.
 */
resource ExtraPluginInfo(1)
{
	kTKICompanyValue,			// Company name
	kTKIMissingPluginURLValue,	// URL 
	kTKIMissingPluginAlertValue,	// Missing plug-in alert text
};

/* 
 * Boss class definitions.
 */
resource ClassDescriptionTable(kSDKDefClassDescriptionTableResourceID)
{{{

	/*
	 * This boss class supports two interfaces:
	 * IActionComponent and IPMPersist.
	 * 
	 * @ingroup typekitinspector
	 */
	Class
	{
		kTKIActionComponentBoss,
		kInvalidClass,
		{
			// Handle the actions from the menu.
			IID_IACTIONCOMPONENT, kTKIActionComponentImpl,
			// Persist the state of the menu across application instantiation. Implementation provided by the API.
			IID_IPMPERSIST, kPMPersistImpl
		}
	},

    /*
	 * This boss class inherits from an API panel boss class, and
	 * adds an interface to control a pop-up menu on the panel.
	 * The implementation for this interface is provided by the API.
     *
	 * 
	 * @ingroup typekitinspector
	 */
	Class
	{
		kTKIPanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{
			IID_IPANELMENUDATA, kCPanelMenuDataImpl,
			IID_IOBSERVER, kTKIPanelWidgetObserverImpl,
		}
	},

	Class
	{
		kTKITextListWidgetBoss,
		kTreeViewWidgetBoss,
		{
			IID_ITREEVIEWWIDGETMGR, kTKITreeViewWidgetMgrImpl,
            IID_ITREEVIEWHIERARCHYADAPTER, kTKITreeViewHierarchyAdapterImpl,
			IID_IOBSERVER,	kTKITreeWidgetObserverImpl,
			IID_ITKISTRINGLISTDATA, kTKIStringListDataImpl,
		}
	},

	Class
	{
		kTKITreeNodeWidgetBoss,
		kTreeNodeWidgetBoss,
		{
		}
	},

}}};

/*  
 * Implementation definition.
 */
resource FactoryList (kSDKDefFactoryListResourceID)
{
	kImplementationIDSpace,
	{
		#include "TKIFactoryList.h"
	}
};

/*  
 * Menu definition.
 */
resource MenuDef (kSDKDefMenuResourceID)
{
	{
		// The About sub-menu item for this plug-in.
		kTKIAboutActionID,			// ActionID (kInvalidActionID for positional entries)
		kTKIAboutMenuPath,			// Menu Path.
		kSDKDefAlphabeticPosition,											// Menu Position.
		kSDKDefIsNotDynamicMenuFlag,										// kSDKDefIsNotDynamicMenuFlag or kSDKDefIsDynamicMenuFlag

		// Separator for the popup menu on the panel
		kTKISeparator1ActionID,
		kTKIInternalPopupMenuNameKey kSDKDefDelimiterAndSeparatorPath,	// :- to mark an item as a separator.
		kTKISeparator1MenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

		// About this plug-in sub-menu for the popup menu on the panel
		kTKIPopupAboutThisActionID,
		kTKITargetMenuPath
		kTKIAboutThisMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,
	}
};

/* 
 * Action definition.
 */
resource ActionDef (kSDKDefActionResourceID)
{
	{
		kTKIActionComponentBoss, 		// ClassID of boss class that implements the ActionID.
		kTKIAboutActionID,	// ActionID.
		kTKIAboutMenuKey,	// Sub-menu string.
		kOtherActionArea,				// Area name (see ActionDefs.h).
		kNormalAction,					// Type of action (see ActionDefs.h).
		kDisableIfLowMem,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,			// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag, // kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.

		kTKIActionComponentBoss,
		kTKIPopupAboutThisActionID,
		kSDKDefAboutThisPlugInMenuKey,	// Key to the name of this action
		kOtherActionArea,
		kNormalAction,
		kDisableIfLowMem,
		kInvalidInterfaceID,
		kSDKDefInvisibleInKBSCEditorFlag,
	}
};

/*  
 * Locale Indicies.
 * The LocaleIndex should have indicies that point at your
 * localizations for each language system that you are localized for.
 */

/*  
 * String LocaleIndex.
 */
resource LocaleIndex ( kSDKDefStringsResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_enUS, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_enGB, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_deDE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_frFR, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_esES, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_ptBR, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_svSE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_daDK, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_nlNL, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_itIT, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_nbNO, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_fiFI, kSDKDefStringsResourceID + index_enUS
		kInDesignJapaneseFS, k_jaJP, kSDKDefStringsResourceID + index_jaJP
	}
};

resource LocaleIndex (kSDKDefStringsNoTransResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_Wild, kSDKDefStringsNoTransResourceID + index_enUS
	}
};

resource LocaleIndex (kTKITreeViewNodeWidgetRsrcID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, kTKITreeViewNodeWidgetRsrcID + index_enUS
	}
}

// Strings not being localized
resource StringTable (kSDKDefStringsNoTransResourceID + index_enUS)
{
	k_enUS,									// Locale Id
	kEuropeanMacToWinEncodingConverter,		// Character encoding converter
	{
		kTKIInternalPopupMenuNameKey,	kTKIInternalPopupMenuNameKey,		// No need to translate, internal menu name.
	
	}
};

/*  
 * Panel LocaleIndex.
 */
resource LocaleIndex (kSDKDefPanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kSDKDefPanelResourceID + index_enUS
	}
};

/*  
 * Type definitions.
 */
type TKIPanelWidget(kViewRsrcType) : PalettePanelWidget(ClassID = kTKIPanelWidgetBoss)
{
	CPanelMenuData;
};

type TKITextListWidget (kViewRsrcType) : TreeViewWidget  (ClassID = kTKITextListWidgetBoss)
{  
};

type TKITreeNodeWidget(kViewRsrcType) : PrimaryResourcePanelWidget(ClassID = kTKITreeNodeWidgetBoss) 
{
};

/*  
 * PanelList definition.
 */
resource PanelList (kSDKDefPanelResourceID)
{
	{
		// 1st panel in the list
		kSDKDefPanelResourceID,		// Resource ID for this panel (use SDK default rsrc ID)
		kTKIPluginID,			// ID of plug-in that owns this panel
		kIsResizable,
		kTKIPanelWidgetActionID,	// Action ID to show/hide the panel
		kTKIPanelTitleKey,	// Shows up in the Window list.
		"",							// Alternate menu path of the form "Main:Foo" if you want your palette menu item in a second place
		0.0,						// Alternate Menu position Alternate Menu position for determining menu order
		0,0,						// Rsrc ID, Plugin ID for a PNG icon resource to use for this palette
		c_Panel
	}
};

/* 
 * PanelView definition.
 * Note: it is not necessary to use EVE for panels.
 * The view is not currently localised: therefore, it can reside here.
 * However, if you wish to localise it, it is recommended to locate it in one of
 * the localised framework resource files (i.e. TKI_enUS.fr etc.).
 */
resource TKIPanelWidget(kSDKDefPanelResourceID + index_enUS)
{
	__FILE__, __LINE__,					// Localization macro
	kTKIPanelWidgetID,					// WidgetID
	kPMRsrcID_None,						// RsrcID
	kBindNone,							// Binding (0=none)
	Frame(0, 0, 315, 370),				// Frame: left, top, right, bottom.
	kTrue, kTrue,						// Visible, Enabled
	kFalse,								// Erase background
	kInterfacePaletteFill,				// Erase to color
	kFalse,								// Draw dropshadow
	kTKIPanelTitleKey,					// Panel name
	{
		ButtonWidget
		(
			kTKIGetFontsButtonWidgetID, kPMRsrcID_None,	// WidgetId, RsrcId
			kBindLeft,									// Frame binding
			Frame(15, 15, 70, 35),					// left, top, right, bottom
			kTrue, kTrue,								// Visible, Enabled
			kTKIGetFontsButtonKey,						// button label
		),

		ButtonWidget
		(
			kTKIRefreshFontsButtonWidgetID, kPMRsrcID_None,	// WidgetId, RsrcId
			kBindLeft,										// Frame binding
			Frame(72, 15, 121, 35),						// left, top, right, bottom
			kTrue, kTrue,									// Visible, Enabled
			kTKIRefreshFontsButtonKey,						// button label
		),

		GroupPanelWidget
		(
			kInvalidWidgetID, kPMRsrcID_None,			// WidgetId, RsrcId
			kBindAll,									// Frame binding
			Frame(15, 40, 296, 360),					// left, top, right, bottom
			kTrue, kTrue,								// Visible, Enabled
			kTKIUsageSampleWidgetID,						// widget id of border widget
			{
				TextComboBoxWidget
				(
					kTKIUsageSampleWidgetID, kPMRsrcID_None,  // WidgetId, RsrcId
					kBindLeft | kBindRight | kBindTop,     // Frame binding
					Frame(0, 0, 255, 22)				 //  left, top, right, bottom
					kTrue, kFalse,                       // Visible, Enabled
					0,                                  // widget id of nudge button
					0,0,                                // small/large nudge amount
					0,                                  // max num chars( 0 = no limit)
					kTrue,								// is read only
					kFalse,                             // should notify each key stroke
					kFalse,                             // range checking enabled
					kTrue,								// blank entry allowed
					0, 0,                               // upper/lower bounds
					kTKIFontComboDefaultTextKey,		// initial text
					{{
						kTKIFontComboDefaultTextKey,
					}}
				),

				TKITextListWidget
				(
					kTKITextListWidgetID, kPMRsrcID_None,// WidgetId, RsrcId
					kBindAll,
					Frame(15, 29, 267, 307),	//  left, top, right, bottom
					kTrue, kTrue,				// Visible, Enabled
					kTrue,						// EraseBeforeDraw
					kInterfacePaletteFill,		// InterfaceColor
					"",
					kHideRootNode | kDrawBorder, //Options
					kFalse,						//Use H Scroll bar
					kTrue,						//Use V scroll bar
					20,							// Vertical Scroll Button Increment
					20,							// Vertical Thumb Scroll Increment
					0,							// Horizontal Scroll Button Increment - Not Used
					0,							// Horizontal Thumb Scroll Increment - Not Used
					1,							// Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
					kFalse,						// Allow children from multiple parents to be selected
					kFalse,						// Allow discontiguous selection
					{
					}
				),

			},
		),
	}

	kTKIInternalPopupMenuNameKey		// Popup menu name (internal)
};

// TreeNode
resource TKITreeNodeWidget (kTKITreeViewNodeWidgetRsrcID + index_enUS)
{
	__FILE__, __LINE__,
	kTKITreeNodeWidgetId, kPMRsrcID_None,	// WidgetId, RsrcId
	kBindLeft | kBindRight,					// Frame binding
	Frame(0, 0, 413, 27),					// Frame (left, top, right, bottom)
	kTrue, kTrue,							// Visible, Enabled
	"",										// Panel name
	{
		StaticTextWidget
		(
			kTKITreeNodeTextWidgetID,			// WidgetId (default=0)
			kSysStaticTextPMRsrcId,				// RsrcId
			kBindAll,							// Frame binding
			Frame(0, 0, 413, 27),				// Frame: left, top, right, bottom.
			kTrue, kTrue,						// Visible, Enabled
			kAlignLeft, kEllipsizeEnd, kTrue	// Alignment, ellipsize style, convert ampersands
			"",									// Initial text.
			0									// No associated widget
		),
	}
};

#endif // __ODFRC__

#include "TKI_enUS.fr"
#include "TKI_jaJP.fr"
