//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/sdksamples/basiclocalization/BscL10NDialogController.cpp $
//  
//  Owner: Adobe Developer Technologies
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "VCPlugInHeaders.h"

// Interface includes:
// none.

// General includes:
#include "CAlert.h"
#include "CDialogController.h"
#include "SystemUtils.h"

// Project includes:
#include "BscL10NID.h"

/** BscL10NDialogController
	Methods allow for the initialization, validation, and application of dialog widget values.
  
	Implements IDialogController based on the partial implementation CDialogController. 
	@ingroup basiclocalization
	
*/
class BscL10NDialogController : public CDialogController
{
	public:
		/**
			Constructor.
			@param boss interface ptr from boss object on which this interface is aggregated.
		*/
		BscL10NDialogController(IPMUnknown* boss) : CDialogController(boss) {}

		/** 
			Destructor.
		*/
		virtual ~BscL10NDialogController() {}

protected:
		/**
			Initialize each widget in the dialog with its default value.
			Called when the dialog is opened.
		*/
		virtual void InitializeDialogFields(IActiveContext* dlgContext);

		/**
			Validate the values in the widgets. 
			By default, the widget with ID kOKButtonWidgetID causes 
			ValidateFields to be called. When all widgets are valid, 
			ApplyFields will be called.			
			@return kDefaultWidgetId if all widget values are valid, WidgetID of the widget to select otherwise.

		*/
		virtual WidgetID ValidateDialogFields(IActiveContext* myContext);

		/**
			Retrieve the values from the widgets and act on them.
			@param widgetId identifies the widget on which to act.
		*/
		virtual void ApplyDialogFields(IActiveContext* myContext, const WidgetID& widgetId);
};

/* CREATE_PMINTERFACE
 Binds the C++ implementation class onto its 
 ImplementationID making the C++ code callable by the 
 application.
*/
CREATE_PMINTERFACE(BscL10NDialogController, kBscL10NDialogControllerImpl)

/* ApplyFields
*/
void BscL10NDialogController::InitializeDialogFields(IActiveContext* dlgContext) 
{
	CDialogController::InitializeDialogFields(dlgContext);

	// Put code to initialize widget values here.
}

/* ValidateFields
*/
WidgetID BscL10NDialogController::ValidateDialogFields(IActiveContext* myContext) 
{
	WidgetID result = CDialogController::ValidateDialogFields(myContext);

	// Put code to validate widget values here.

	return result;
}

/* ApplyFields
*/
void BscL10NDialogController::ApplyDialogFields(IActiveContext* myContext, const WidgetID& widgetId)
{

	// this shows that locale specfic strings are easy to obtain with PMString.
	PMString sampleString(kBscL10NStaticTextStringKey, PMString::kTranslateDuringCall);
	CAlert::InformationAlert(sampleString);

}
//  Generated by Dolly build 17: template "Dialog".
// End, BscL10NDialogController.cpp.




