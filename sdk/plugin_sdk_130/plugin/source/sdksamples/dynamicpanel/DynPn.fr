//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/sdksamples/dynamicpanel/DynPn.fr $
//  
//  Owner: Adobe Developer Technologies
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//  
//  Umbrella include file for all the .fr files in the plug-in.
//  
//========================================================================================

//===========================
//  General includes:
//===========================

#include "MenuDef.fh"
#include "ActionDef.fh"
#include "ActionDefs.h"
//#include "AdobeMenuPositions.h"
#include "LocaleIndex.h"
#include "PMLocaleIds.h"
#include "StringTable.fh"
//#include "OMTypes.h"
#include "objectmodeltypes.fh"
#include "ShuksanID.h"
#include "ActionID.h"
#include "CommandID.h"
#include "WorkspaceID.h"
#include "widgetid.h"
#include "BuildNumber.h"
#include "PanelList.fh"
#include "Widgets.fh"	// for PalettePanelWidget
#include "InterfaceColorDefines.h"
#include "IControlViewDefs.h"
#include "SysControlIds.h"

#include "PlugInModel_UIAttributes.h"

// Project includes:
#include "DynPnID.h"

#ifdef __ODFRC__

resource	ImplementationAlias(1)
{ 
	{ 
		kDynPnPersistUIDRefDataImpl, kPersistUIDDataImpl, 
	} 
};

/*
// Plugin version definition.
*/
resource PluginVersion (kSDKDefPluginVersionResourceID)
{
	kTargetVersion,
	kDynPnPluginID,
	kSDKDefPlugInMajorVersionNumber, kSDKDefPlugInMinorVersionNumber, 	
	kSDKDefHostMajorVersionNumber, kSDKDefHostMinorVersionNumber,
	kDynPnLastMajorFormatChange, kDynPnLastMinorFormatChange,
	{ kInDesignProduct, kInCopyProduct }, 
	{ kWildFS },
	kUIPlugIn,
	kDynPnVersion
};

/*
//	Boss class definition.
*/
resource ClassDescriptionTable(kSDKDefClassDescriptionTableResourceID)
{{{
	/**
	 Provides the actions invoked by this plug-in's sub-menu items. 

	 @ingroup dynamicpanel
	*/
	Class
	{
		kDynPnActionComponentBoss,
		kBaseActionComponentBoss,
		{
			/** Handle the actions from the menu. */
			IID_IACTIONCOMPONENT, kDynPnActionComponentImpl,
		}
	},

	/**
	Implements IActionComponent; responsible for handling the 'new panel' and 'close panel' menu items
	located on the main plug-ins menu.

	@ingroup dynamicpanel
	*/
	Class
	{
		kDynPnMgrActionComponentBoss,
		kBaseActionComponentBoss,
		{
			/** Handle the actions from the menu. */
			IID_IACTIONCOMPONENT, kDynPnMgrActionComponentImpl,
		}
	},

	/**
		 Controls addition of a pop-up menu to the panel.
		
		@ingroup dynamicpanel
	*/

	Class
	{
		kDynPnPanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{
			/** The plug-in's implementation of ITextControlData with an exotic IID of IID_IPANELMENUDATA.
			Implementation provided by the API.
			*/ 
			IID_IPANELMENUDATA, kCPanelMenuDataImpl,
		}
	},


	/**
		Manages lifetime of our dynamically created panels.

		@ingroup dynamicpanel
	*/
	Class
	{
		kDynPnPanelManagerBoss,
		kInvalidClass,
		{
			IID_IPMPERSIST,			kPMPersistImpl,
			IID_IDynPnPANELMANAGER, kDynPnPanelManagerImpl,
		},
	},
	
	/**
		Adds a persistent interface to the session boss.
		@ingroup dynamicpanel
	*/
	AddIn
	{
		kSessionBoss,
		kInvalidClass,
		{
			IID_IDynPnPERSISTUIDDATA,		kDynPnPersistUIDRefDataImpl,	
		}
	},


}}};

/*
// Implementation definition.
*/
resource FactoryList (kSDKDefFactoryListResourceID) 
{
	kImplementationIDSpace,
	{
#include "DynPnFactoryList.h"
	}
};

/*
// Menu definition.
*/
resource MenuDef (kSDKDefMenuResourceID)
{
	{
		// The About Plug-ins sub-menu item for this plug-in.
		kDynPnAboutActionID,			// ActionID (kInvalidActionID for positional entries)
		kDynPnAboutMenuPath,			// Menu Path.
		kSDKDefAlphabeticPosition,			// Menu Position.
		kSDKDefIsNotDynamicMenuFlag,		// kSDKDefIsNotDynamicMenuFlag or kSDKDefIsDynamicMenuFlag.

		kDynPnSomethingActionID,
		kDynPnTargetMenuPath,
		kDynPnSomethingMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

		// Separator for the popup menu on the panel
		kDynPnSeparator1ActionID,
		kDynPnInternalPopupMenuNameKey kSDKDefDelimiterAndSeparatorPath,	// :- to mark an item as a separator.
		kDynPnSeparator1MenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

		// About this plugin submenu for the popup menu on the panel
		kDynPnPopupAboutThisActionID,
		kDynPnTargetMenuPath
		kDynPnAboutThisMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag, 

		kDynPnMgrNewPanelActionID,
		kDynPnMgrTargetMenuPath,
		kDynPnMgrNewPanelMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

		kDynPnMgrClosePanelActionID,
		kDynPnMgrTargetMenuPath,
		kDynPnMgrClosePanelMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,
	}
};

/*
// Action definition.
*/
resource ActionDef (kSDKDefActionResourceID)
{
	{ 
		kDynPnActionComponentBoss, 		// ClassID of boss class that implements the ActionID.
		kDynPnAboutActionID,	// ActionID.
		kDynPnAboutMenuKey,	// Sub-menu string.
		kHelpMenuActionArea,				// Area name (see ActionDefs.h).
		kNormalAction,					// Type of action (see ActionDefs.h).
		kDisableIfLowMem,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,			// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag, // kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.

		kDynPnActionComponentBoss,
		kDynPnSomethingActionID,		
		kDynPnSomethingMenuItemKey,		
		kOtherActionArea,			
		kNormalAction,				
		kDisableIfLowMem,	
		kInvalidInterfaceID,		
		kSDKDefInvisibleInKBSCEditorFlag,
				
		kDynPnActionComponentBoss, 
		kDynPnPopupAboutThisActionID, 
		kSDKDefAboutThisPlugInMenuKey,	// Key to the name of this action
		kOtherActionArea,
		kNormalAction,
		kDisableIfLowMem,	
		kInvalidInterfaceID,
		kSDKDefInvisibleInKBSCEditorFlag,

		kDynPnMgrActionComponentBoss,
		kDynPnMgrNewPanelActionID,		
		kDynPnMgrNewPanelMenuItemKey,		
		kOtherActionArea,			
		kNormalAction,				
		kDisableIfLowMem,	
		kInvalidInterfaceID,		
		kSDKDefInvisibleInKBSCEditorFlag,

		kDynPnMgrActionComponentBoss,
		kDynPnMgrClosePanelActionID,		
		kDynPnMgrClosePanelMenuItemKey,		
		kOtherActionArea,			
		kNormalAction,				
		kCustomEnabling,	
		kInvalidInterfaceID,		
		kSDKDefInvisibleInKBSCEditorFlag,


	}
};

/*
// LocaleIndex
// The LocaleIndex should have indicies that point at your
// localizations for each language system that you are 
// localized for.
*/
/*
// String LocaleIndex.
*/
resource LocaleIndex (kSDKDefStringsResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_enUS, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_jaJP, kSDKDefStringsResourceID + index_jaJP
		
		kWildFS, k_Wild, kSDKDefStringsResourceID + index_enUS
	}
};

resource LocaleIndex (kSDKDefStringsNoTransResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_Wild, kSDKDefStringsNoTransResourceID + index_enUS
	}
};

resource StringTable (kSDKDefStringsNoTransResourceID + index_enUS)
{
	k_enUS,									// Locale Id
	kEuropeanMacToWinEncodingConverter,		// Character encoding converter
	{
		// No-Translate strings go here:		
		kDynPnInternalPopupMenuNameKey,	kDynPnInternalPopupMenuNameKey,		// No need to translate, internal menu name.
	}
};



/*
// Panel LocaleIndex.
*/
resource LocaleIndex (kSDKDefPanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kSDKDefPanelResourceID + index_enUS
	}
};


/*
// Type definition.
*/
type DynPnPanelWidget(kViewRsrcType) : PalettePanelWidget(ClassID = kDynPnPanelWidgetBoss) 
{
	CPanelMenuData;
};

/*
// PanelView definition.
// The view is not currently localised: therefore, it can reside here.
// However, if you wish to localise it, it is recommended to locate it in one of
// the localised framework resource files (i.e. DynPn_ensUS.fr etc.).
*/
resource DynPnPanelWidget(kSDKDefPanelResourceID + index_enUS)
{
	__FILE__, __LINE__,					// Localization macro	
	kDynPnPanelWidgetID,			// WidgetID ; this gets changed dynamically to avoid clash!
	kPMRsrcID_None,						// RsrcID
	kBindNone,							// Binding (0=none)
	0, 0, 207, 32,						// Frame: left, top, right, bottom.
	kTrue, kTrue,						// Visible, Enabled
	kFalse,								// Erase background
	kInterfacePaletteFill,				// Erase to color
	kFalse,								// Draw dropshadow
	kDynPnPanelTitleKey,			// Panel name	
	{
//<FREDDYWIDGETDEFLISTUS>
		StaticTextWidget
		(
			0,								// WidgetId (default=0)
			 kSysStaticTextPMRsrcId,		// RsrcId
			kBindNone,						// Frame binding
			5, 10, 202, 27,					// Frame: left, top, right, bottom.
			kTrue, kTrue,					// Visible, Enabled
			kAlignLeft, kEllipsizeEnd, kTrue,		// Alignment, ellipsize style, convert ampersands
			kDynPnStaticTextKey,		// Initial text.
			0								// No associated widget
		),
//</FREDDYWIDGETDEFLISTUS>
		
	}

	kDynPnInternalPopupMenuNameKey		// Popup menu name (internal)
};



#endif // __ODFRC__

#include "DynPn_enUS.fr"
#include "DynPn_jaJP.fr"
//  Generated by Dolly build 17: template "IfPanelMenu".
// End, DynPn.fr.






