//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/sdksamples/xmldataupdaterui/DataUpdaterUI.fr $
//  
//  Owner: Adobe Developer Technologies
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//  
//  Umbrella include file for all the .fr files in the plug-in.
//  
//========================================================================================

//===========================
//  General includes:
//===========================

#include "MenuDef.fh"
#include "ActionDef.fh"
#include "ActionDefs.h"
#include "AdobeMenuPositions.h"
#include "LocaleIndex.h"
#include "PMLocaleIds.h"
#include "StringTable.fh"
#include "objectmodeltypes.fh"
#include "ShuksanID.h"
#include "ActionID.h"
#include "CommandID.h"
#include "WorkspaceID.h"
#include "widgetid.h"
#include "BuildNumber.h"
#include "PanelList.fh"
#include "Widgets.fh"	// for PalettePanelWidget
#include "InterfaceColorDefines.h"
#include "IControlViewDefs.h"
#include "SysControlIds.h"
#include "IconStyleDefs.h"
#include "DragDropID.h"
#include "LayoutUIID.h" // for  kLayoutDDTargHelperProviderImpl
#include "TreeViewDefs.h"

#include "PlugInModel_UIAttributes.h"

// Project includes:
#include "DataUpdaterID.h"
#include "DataUpdaterUIID.h"

#ifdef __ODFRC__

/*
// Plugin version definition.
*/
resource PluginVersion (kSDKDefPluginVersionResourceID)
{
	kTargetVersion,
	kDataUpdaterUIPluginID,
	kSDKDefPlugInMajorVersionNumber, kSDKDefPlugInMinorVersionNumber, 	
	kSDKDefHostMajorVersionNumber, kSDKDefHostMinorVersionNumber,
	kDataUpdaterUILastMajorFormatChange, kDataUpdaterUILastMinorFormatChange,
	{ kInDesignProduct },
	{ kWildFS },
	kUIPlugIn,
	kDataUpdaterUIVersion
};

/*
//	Boss class definition.
*/
resource ClassDescriptionTable(kSDKDefClassDescriptionTableResourceID)
{{{
	/**
	This boss class provides the actions invoked by this plug-in's
	sub-menu items. 
	@ingroup xmldataupdaterui
	*/
	Class
	{
		kDataUpdaterUIActionComponentBoss,
		kBaseActionComponentBoss,
		{
			/** Handle the actions from the menu. */
			IID_IACTIONCOMPONENT,  kDataUpdaterUIActionComponentImpl,
		}
	},

	/**
	This boss class inherits from an API panel boss class, and
	adds an interface to control a pop-up menu on the panel.
	The implementation for this interface is provided by the API.
	@ingroup xmldataupdaterui
	*/
	Class
	{
		kDataUpdaterUIPanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{
			/** The plug-in's implementation of ITextControlData with an exotic IID of IID_IPANELMENUDATA.
			Implementation provided by the API.
			*/ 
			IID_IPANELMENUDATA,  kCPanelMenuDataImpl,
			/** CSV data file  */
			IID_ISYSFILEDATA, kSysFileDataImpl,
		}
	},

	/**
	Our tree view widget subclassed as we must provide ITreeViewWidgetMgr and ITreeViewHierarchyAdapter implementations
	to work with tree-view control. 
	@ingroup xmldataupdaterui
	*/
	Class
	{
		kDataUpdaterUITreeViewWidgetBoss,
		kTreeViewWidgetBoss,
		{
			/** Furnishes application framework with widgets as needed and geometry info */
			IID_ITREEVIEWWIDGETMGR,  kDataUpdaterUITVWidgetMgrImpl,
			/** Adapts our data model to the needs of the application framework */
			IID_ITREEVIEWHIERARCHYADAPTER,  kDataUpdaterUITVHierarchyAdapterImpl,
			/** Data model, wrapper for DataUpdaterCSVFileHelper */
			IID_IDATAUPDATERUIDATAMODEL, kDataUpdaterUIDataModelImpl,
		}
	},

}}};

/*
// Implementation definition.
*/
resource FactoryList (kSDKDefFactoryListResourceID) 
{
	kImplementationIDSpace,
	{
		#include "DataUpdaterUIFactoryList.h"
	}
};

/*
// Menu definition.
*/
resource MenuDef (kSDKDefMenuResourceID)
{
	{
		kDataUpdaterUILoadDataActionID,
		kDataUpdaterUITargetMenuPath,
		kDataUpdaterUILoadDataMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

		kDataUpdaterUIInsertDataActionID,
		kDataUpdaterUITargetMenuPath,
		kDataUpdaterUIInsertDataMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

		kDataUpdaterUIInsertAllDataActionID,
		kDataUpdaterUITargetMenuPath
		kDataUpdaterUIInsertAllDataMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag, 

		kDataUpdaterUIUpdateDataActionID,
		kDataUpdaterUITargetMenuPath,
		kDataUpdaterUIUpdateDataMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

		kDataUpdaterUIAboutActionID,			// ActionID (kInvalidActionID for positional entries)
		kDataUpdaterUITargetMenuPath,			// Menu Path.
		kDataUpdaterUIAboutThisMenuItemPosition,		// Menu Position.
		kSDKDefIsNotDynamicMenuFlag,	// kSDKDefIsNotDynamicMenuFlag or kSDKDefIsDynamicMenuFlag.

	}
};

/*
// Action definition.
*/
resource ActionDef (kSDKDefActionResourceID)
{
	{ 

		kDataUpdaterUIActionComponentBoss,
		kDataUpdaterUILoadDataActionID,
		kDataUpdaterUILoadDataMenuItemKey,		
		kOtherActionArea,			
		kNormalAction,				
		kCustomEnabling|kDisableIfLowMem,	
		kInvalidInterfaceID,		
		kSDKDefInvisibleInKBSCEditorFlag,
				

		kDataUpdaterUIActionComponentBoss,
		kDataUpdaterUIInsertDataActionID,		
		kDataUpdaterUIInsertDataMenuItemKey,		
		kOtherActionArea,			
		kNormalAction,				
		kDisableIfNoFrontDocument|kCustomEnabling|kDisableIfLowMem,	
		kInvalidInterfaceID,		
		kSDKDefInvisibleInKBSCEditorFlag,

		kDataUpdaterUIActionComponentBoss, 
		kDataUpdaterUIInsertAllDataActionID, 
		kDataUpdaterUIInsertAllDataMenuItemKey,	// Key to the name of this action
		kOtherActionArea,
		kNormalAction,
		kDisableIfNoFrontDocument|kCustomEnabling|kDisableIfLowMem,	
		kInvalidInterfaceID,
		kSDKDefInvisibleInKBSCEditorFlag,

		kDataUpdaterUIActionComponentBoss, 
		kDataUpdaterUIUpdateDataActionID, 
		kDataUpdaterUIUpdateDataMenuItemKey,	// Key to the name of this action
		kOtherActionArea,
		kNormalAction,
		kDisableIfNoFrontDocument|kCustomEnabling|kDisableIfLowMem,	
		kInvalidInterfaceID,
		kSDKDefInvisibleInKBSCEditorFlag,
		
		kDataUpdaterUIActionComponentBoss, 		// ClassID of boss class that implements the ActionID.
		kDataUpdaterUIAboutActionID,			// ActionID.
		kSDKDefAboutThisPlugInMenuKey,	// Key to the name of this action
		kOtherActionArea,
		kNormalAction,					// Type of action (see ActionDefs.h).
		kCustomEnabling|kDisableIfLowMem,	
		kInvalidInterfaceID,			// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag, // kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.


	}
};


/*
// LocaleIndex
// The LocaleIndex should have indicies that point at your
// localizations for each language system that you are 
// localized for.
*/
/*
// String LocaleIndex.
*/
resource LocaleIndex (kSDKDefStringsResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_enUS, kSDKDefStringsResourceID + index_enUS
		kInDesignJapaneseFS, k_jaJP, kSDKDefStringsResourceID + index_jaJP
		
		kWildFS, k_Wild, kSDKDefStringsResourceID + index_enUS
	}
};

resource LocaleIndex (kSDKDefStringsNoTransResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_Wild, kSDKDefStringsNoTransResourceID + index_enUS
	}
};


resource LocaleIndex (kDataUpdaterUINodeWidgetRsrcID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, kDataUpdaterUINodeWidgetRsrcID + index_enUS
	}
};


resource StringTable (kSDKDefStringsNoTransResourceID + index_enUS)
{
	k_enUS,									// Locale Id
	kEuropeanMacToWinEncodingConverter,		// Character encoding converter
	{
		// No-Translate strings go here:		
		kDataUpdaterUIInternalPopupMenuNameKey,	kDataUpdaterUIInternalPopupMenuNameKey,		// No need to translate, internal menu name.
	}
};


/*
// Panel LocaleIndex.
*/
resource LocaleIndex (kSDKDefPanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, kSDKDefPanelResourceID + index_enUS
	}
};


/*
// Type definition.
*/
type DataUpdaterPanelWidget(kViewRsrcType) : PalettePanelWidget(ClassID = kDataUpdaterUIPanelWidgetBoss) 
{
	CPanelMenuData;
};

type DataUpdaterTreeViewWidget(kViewRsrcType) : TreeViewWidget(ClassID = kDataUpdaterUITreeViewWidgetBoss) 
{
};

type DataUpdaterNodeWidget(kViewRsrcType) : PrimaryResourcePanelWidget(ClassID = kTreeNodeWidgetBoss) 
{
};

/*
// PanelList definition.
*/
resource PanelList (kSDKDefPanelResourceID)
{
	{
		// 1st panel in the list
		kSDKDefPanelResourceID,			// Resource ID for this panel (use SDK default rsrc ID)
		kDataUpdaterUIPluginID,				// ID of plug-in that owns this panel
		kNotResizable,	// palette resizableness
		kDataUpdaterUIPanelWidgetActionID,		// Action ID to show/hide the panel
		kDataUpdaterUIPanelTitleKey,			// Shows up in the Window list.
		"",								// Alternate menu path of the form "Main:Foo" if you want your palette menu item in a second place
		0.0,							// Alternate Menu position Alternate Menu position for determining menu order
		0,0,						// Rsrc ID, Plugin ID for a PNG icon resource to use for this palette
		c_Panel
	}	
};

/*
// PanelView definition.
// The view is not currently localised: therefore, it can reside here.
// However, if you wish to localise it, it is recommended to locate it in one of
// the localised framework resource files (i.e. DataUpdaterUI_enUS.fr etc.).
*/
resource DataUpdaterPanelWidget(kSDKDefPanelResourceID + index_enUS)
{
	__FILE__, __LINE__,				// Localization macro		
	kDataUpdaterUIPanelWidgetID,			// WidgetID 
	kPMRsrcID_None,					// RsrcID
	kBindNone,						// Binding (0=none)
	0, 0, 207, 222,					// Frame: left, top, right, bottom.
	kTrue, kTrue,					// Visible, Enabled
	kFalse,							// Erase background
	kInterfacePaletteFill,			// Erase to color
	kFalse,							// Draw dropshadow
	kDataUpdaterUIPanelTitleKey,			// Panel name	
	{
	
		ErasablePrimaryResourcePanelWidget
		(
			__FILE__, __LINE__,
			0, kPMRsrcID_None,
			kBindAll,
			Frame(0,22,207,221)	// Frame
			kTrue, kTrue,
			kFalse,							// Erase background
			kInterfacePaletteFill,			// Erase to color
			"",
			{
				DataUpdaterTreeViewWidget
				(
					kDataUpdaterUITreeViewWidgetID, kPMRsrcID_None,// WidgetId, RsrcId
					kBindAll,
					Frame(0,0,207,180)		// Frame
					kTrue, kTrue,			// Visible, Enabled
					kTrue, 						// EraseBeforeDraw
					kInterfacePaletteFill,	 	// InterfaceColor
					"",
					kHideRootNode,	// Options
					kTrue,		// Use H Scroll bar
					kTrue,		// Use V scroll bar
					20,			// fVScrollButtonIncrement
					20,			// fVThumbScrollIncrement
					20,			// fHScrollButtonIncrement
					20,			// fHThumbScrollIncrement
					2,			// Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
					kFalse,		// Allow children from multiple parents to be selected
					kFalse,		// Allow discontiguous selection
					{
								
					},
				),


				StaticTextWidget
				(
					kDataUpdaterUITextMessageWidgetID,		// WidgetId (default=0)
					kSysStaticTextPMRsrcId,			// RsrcId
					kBindNone,						// Frame binding
					1, 181, 207, 200,				// Frame: left, top, right, bottom.
					kTrue, kTrue,					// Visible, Enabled
					kAlignLeft, kEllipsizeEnd, kTrue,		// Alignment, ellipsize style, convert ampersands
					"",								// Initial text.
					0								// No associated widget
				),

			}
		),
		
	}

	kDataUpdaterUIInternalPopupMenuNameKey		// Popup menu name (internal)
};


resource DataUpdaterNodeWidget (kDataUpdaterUINodeWidgetRsrcID + index_enUS)
{
	__FILE__, __LINE__,
	kDataUpdaterUINodeWidgetId, kPMRsrcID_None,	// WidgetId, RsrcId
	kBindLeft, //| kBindRight,					// Frame binding
	Frame(0,0,414,20),						// Frame (left, top, right, bottom)
	kTrue, kTrue,							// Visible, Enabled
	"",										// Panel name
	{
		// Drop down arrow
		TreeExpanderWidget
		(
			kTreeNodeExpanderWidgetID,		// WidgetId
			kTreeBranchCollapsedRsrcID,		// RsrcId for collapsed node icon
			kApplicationRsrcPluginID,		// RsrcPlugin for collapsed node icon
			kBindNone,						// Frame binding
			Frame(2,4,18,18),				// Frame
			kTrue, kTrue,					// Visible, Enabled
			kTreeBranchExpandedRsrcID, 		// RsrcId for expanded node icon
			kApplicationRsrcPluginID,		// RsrcPlugin for expanded node icon
			kTrue,							// Cmd-Click expands/collapses children
			kFalse,							// Scroll to show children when expanded
			kIconNoCentering,			
			kIconRaisedLook,		// Sets the icon look -- (kIconRaisedLook | kIconFlushLook)
			kFalse					// Bool integer sets whether the icon draws a well.
		),
		
		GenericPanelWidget
		(
			kDataUpdaterUIElementWidgetId,			// WidgetId
			kPMRsrcID_None,					// RsrcId
			kBindLeft | kBindRight,			// Frame binding
			Frame(19,0,414,18)				// Frame
			kTrue, kTrue,					// Visible, Enabled
			"",
			{				
				InfoStaticTextWidget
				(
					kDataUpdaterUINodeNameWidgetID,		// WidgetId
					kPMRsrcID_None,					// RsrcId
					kBindLeft, // Frame binding
					Frame(0,0,414,18),				// Frame
					kTrue, kTrue,					// Visible, Enabled
					kAlignLeft,						// Alignment
					kDontEllipsize, kTrue,					// Ellipsize style, Convert ampersands
					"",								// Text Control Data	
					0,								// WidgetId for associated control for shortcut focus
					kPaletteWindowSystemScriptFontId, kPaletteWindowSystemScriptFontId, 
				),
		
	
			}
		),
	}
}


#endif // __ODFRC__

#include "DataUpdaterUI_enUS.fr"
#include "DataUpdaterUI_jaJP.fr"

// End, DataUpdater.fr.
