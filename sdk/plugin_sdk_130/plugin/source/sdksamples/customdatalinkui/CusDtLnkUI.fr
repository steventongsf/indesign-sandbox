//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/sdksamples/customdatalinkui/CusDtLnkUI.fr $
//  
//  Owner: Adobe Developer Technologies
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "VCPlugInHeaders.h"

#include "MenuDef.fh"
#include "ActionDef.fh"
#include "ActionDefs.h"
#include "AdobeMenuPositions.h"
#include "LocaleIndex.h"
#include "PMLocaleIds.h"
#include "StringTable.fh"
#include "objectmodeltypes.fh"
#include "ShuksanID.h"
#include "ActionID.h"
#include "CommandID.h"
#include "WorkspaceID.h"
#include "widgetid.h"
#include "BuildNumber.h"
#include "PanelList.fh"
#include "IDList.fh" 
#include "IDListPair.fh" 
#include "InterfaceColorDefines.h"
#include "IControlViewDefs.h"
#include "SysControlIds.h"
#include "Widgets.fh"	// for PalettePanelWidget or DialogBoss
#include "PageItemScrapID.h"
#include "LayoutUIID.h"
#include "CusDtLnkUIID.h"
#include "CusDtLnkID.h"	 // kCus...
#include "DragDropID.h"	// IID_IDRAG...
#include "EveInfo.fh"
#include "PlugInModel_UIAttributes.h"

#ifdef __ODFRC__

resource PNGA(kCusDtLnkUIBlankIconRsrcID) "P_Blank_Md_N.png"
resource PNGA(kCusDtLnkUILockedPencilIconRsrcID) "P_LockPencil_Sm_N.png"
resource PNGA(kCusDtLnkUIPenIconRsrcID) "P_PenPalette_Sm_N.png"
resource PNGA(kCusDtLnkUIPenLockedIconRsrcID) "P_LockPen_Sm_N.png"
resource PNGA(kCusDtLnkUIPenSmallIconRsrcID) "P_PenSmPalette_Sm_N.png"
resource PNGA(kCusDtLnkUIPenLockedSmallIconRsrcID) "P_LockPenSm_Sm_N.png"

/*
// Plugin version definition.
*/
resource PluginVersion (kSDKDefPluginVersionResourceID)
{
	kTargetVersion,
	kCusDtLnkUIPluginID,
	kSDKDefPlugInMajorVersionNumber, kSDKDefPlugInMinorVersionNumber,
	kSDKDefHostMajorVersionNumber, kSDKDefHostMinorVersionNumber,
	kCusDtLnkUICurrentMajorFormatNumber, kCusDtLnkUICurrentMinorFormatNumber,
	{ kInDesignProduct},
	{ kWildFS },
	kUIPlugIn,
	kCusDtLnkUIVersion
};


/*
// Dependent on CustomDataLink plug-in.
*/
resource PluginDependency(kSDKDefPluginDependencyResourceID)
{
	kWildFS
	{
		kCusDtLnkPluginID,
		kCusDtLnkPluginName,
		kSDKDefPlugInMajorVersionNumber,
		kSDKDefPlugInMinorVersionNumber,
	}
}

/*
//	Boss class definition.
*/
resource ClassDescriptionTable(kSDKDefClassDescriptionTableResourceID)
{{{
	
	/** Action component  extension pattern, to provide menu items.

	 
	 @ingroup customdatalinkui
	*/
	Class
	{
		kCusDtLnkUIActionComponentBoss,
		kBaseActionComponentBoss,
		{
			/** Handle the actions from the menu. */
			IID_IACTIONCOMPONENT, kCusDtLnkUIActionComponentImpl,
		}
	},

	/** Palette panel widget extension pattern, creates main panel for this plug-in. 
		This boss class inherits from an API panel boss class, and
		 adds an interface to control a pop-up menu on the panel.
		 The implementation for this interface is provided by the API.

		 
		 @ingroup customdatalinkui
	*/

	Class
	{
		kCusDtLnkUIPalettePanelWidgetBoss,
		kPalettePanelWidgetBoss,
		{
			/** The plug-in's implementation of ITextControlData with an exotic IID of IID_IPANELMENUDATA.
			Implementation provided by the API.
			*/
			IID_IPANELMENUDATA, kCPanelMenuDataImpl,
		}
	},

	
	/** Customize behaviour of the tree-view widget control.
		Our tree view widget provides ITreeViewWidgetMgr and ITreeViewHierarchyAdapter implementations
		to work with tree-view control. 
		@ingroup customdatalinkui
	*/
	Class
	{
		kCusDtLnkUITreeViewWidgetBoss,
		kTreeViewWidgetBoss,
		{
			/** ITreeViewWidgetMgr application; furnishes application framework with widgets as needed and geometry info */
			IID_ITREEVIEWWIDGETMGR,  kCusDtLnkUITVWidgetMgrImpl,
			
			/** IObserver implementation; observes changes in the selection within the tree-view */
			IID_IOBSERVER,  kCusDtLnkUITreeObserverImpl,
			
			/** ITreeViewHierarchyAdapter  implementation that 
				adapts our data model to the needs of the application framework */
			IID_ITREEVIEWHIERARCHYADAPTER,  kCusDtLnkUITVHierarchyAdapterImpl,
			
			/** Implementation of ICusDtLnkUITreeDataModel, 
				our own custom data model
				@see CusDtLnkUITreeDataModel
			*/
			IID_ICUSDTLNKUITREEDATAMODEL, kCusDtLnkUITreeDataModelImpl,
			
		}
	},

	/**
	Subclass to allow us to use a proxy event handler (to catch double clicks), 
	to add drag-drop capability and to an observer for node expand/contract events.
	@ingroup customdatalinkui
	*/
	Class
	{
		kCusDtLnkUITreeNodeWidgetBoss,
		kTreeNodeWidgetBoss,
		{
			/** IEventHandler implememtation, 
				what the application framework thinks is the  control's event handler
				@see CusDtLnkUITreeNodeEH
			*/
			IID_IEVENTHANDLER,  kCusDtLnkUITreeNodeEHImpl,
			/** The real event handler (IEventHandler) associated with this control, we delegate to this implementation */
			IID_ICUSDTLNKUITREESHADOWEVENTHANDLER,  kTreeNodeEventHandlerImpl,
			
			/** Observer (IObserver) for changes in node state 
				such as expand/contract 
				@see CusDtLnkUITreeNodeObserver
			*/
			IID_IOBSERVER,  kCusDtLnkUITreeNodeObserverImpl,
			
			
			/** IDragDropSource implementation.
				@see CusDtLnkUIDragDropSource. 
			 */
			IID_IDRAGDROPSOURCE,  kCusDtLnkUIDragDropSourceImpl,
		}
	},


	/**
	This boss provide a custom draw implementation on the kGenericPanelWidgetBoss, 
	it illustrates how to change a panel's appearance through overriding IControlView.
	@ingroup customdatalinkui
	*/
	Class
	{
		kCusDtLnkUITreeCViewPanelWidgetBoss,
		kGenericPanelWidgetBoss,
		{
			/** IControlView implementation to preview assets
			*/
			IID_ICONTROLVIEW, kCusDtLnkUICustomViewImpl,

			/** ISysFileData, to store local replica file to preview in this widget */
			IID_ISYSFILEDATA, kSysFileDataImpl,
		}
	},
	
	/** Provides the main behaviour for browse-for-link dialog
	 
		 @ingroup customdatalinkui
	*/
	Class
	{
		kCusDtLnkUIBrowsDialogBoss,
		kDialogBoss,
		{
			/** Implementation of IDialogController.
				@see CusDtLnkUIBrowsDialogController 
			*/
			IID_IDIALOGCONTROLLER, kCusDtLnkUIBrowsDialogControllerImpl,
			
			/** Implementation of IObserver.
				@see CusDtLnkUIBrowsDialogObserver
			*/
			IID_IOBSERVER, kCusDtLnkUIBrowsDialogObserverImpl,
			
			/** Flag to store the purpose of the browser dialog, 1 for Place, 2 for Relink.
			*/
			IID_IINTDATA, kIntDataImpl,
 
			/** Holds the link that's selected when relink is selected.
			*/
			IID_IUIDDATA, kUIDDataImpl,
			
		}
	},
	
	
	/** 
		@ingroup customdatalinkui
	*/
	Class
	{
		kCusDtLnkUIDataExchangeHandlerBoss,
		kPageItemScrapHandlerBoss,
		{
			/** IDataExchangeHandler, overrides the data exchange handler. 
				@see CusDtLnkUIDataExchangeHandler
			*/
			IID_IDATAEXCHANGEHANDLER, kCusDtLnkUIDataExchangeHandlerImpl,
			
			/** IStringData implementation, to store a unique key being 'dragged' 
			*/
			IID_ICUSDTLNKUIUNIQUEKEYSTRINGDATA, kStringDataImpl
		}
	},

	/** Register to be a layout widget DD target helper. i.e. we help the layout widget
		with our flavor of data.
		@ingroup customdatalinkui
	*/
	Class
	{
		kCusDtLnkUIDragTargetFlavorHelperBoss,
		kInvalidClass,
		{
			/** IK2ServiceProvider implementation, to signify that we're helping layout widget */
			IID_IK2SERVICEPROVIDER,		kLayoutDDTargHelperProviderImpl,
			/** IDragDropTargetFlavorHelper implementation, to create instance of our custom datalink
				on drop
				@see CusDtLnkUIDDTargetFlavorHelper
			*/
			IID_IDRAGDROPTARGETFLAVORHELPER,	kCusDtLnkUIDDTargetFlavorHelperImpl,
		}
	},
		
}}};

/*
// Implementation definition.
*/
resource FactoryList (kSDKDefFactoryListResourceID)
{
	kImplementationIDSpace,
	{
#include "CusDtLnkUIFactoryList.h"
	}
};


/*
// Menu definition.
*/
resource MenuDef (kSDKDefMenuResourceID)
{
	{
		// The About Plug-ins sub-menu item for this plug-in.
		kCusDtLnkUIAboutActionID,			// ActionID (kInvalidActionID for positional entries)
		kCusDtLnkUIAboutMenuPath,			// Menu Path.
		kSDKDefAlphabeticPosition,			// Menu Position.
		kSDKDefIsNotDynamicMenuFlag,		// kSDKDefIsNotDynamicMenuFlag or kSDKDefIsDynamicMenuFlag
		
		kCusDtLnkUIAddNewDBActionID,
		kCusDtLnkUITargetMenuPath,
		kCusDtLnkUIAddNewDBMenuPosition,
		kSDKDefIsNotDynamicMenuFlag,

		// Separator for the popup menu on the panel
		kCusDtLnkUISeparator1ActionID,
		kCusDtLnkUIInternalPopupMenuNameKey kSDKDefDelimiterAndSeparatorPath,	// :- to mark an item as a separator.
		kCusDtLnkUISeparator1MenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag,

		// About this plugin submenu for the popup menu on the panel
		kCusDtLnkUIPopupAboutThisActionID,
		kCusDtLnkUITargetMenuPath
		kCusDtLnkUIAboutThisMenuItemPosition,
		kSDKDefIsNotDynamicMenuFlag, 
		
		kCusDtLnkUIAddNewDBActionID,
		kCusDtLnkUIPluginsMenuPath,
		kCusDtLnkUIAddNewDBMenuPosition,
		kSDKDefIsNotDynamicMenuFlag,
		
		kCusDtLnkUIPlaceFromCSVActionID,
		kCusDtLnkUIPluginsMenuPath,
		kCusDtLnkUIPlaceFromCSVMenuPosition,
		kSDKDefIsNotDynamicMenuFlag,
		
		// Relink menu to be hung under app's links panel popup
		kCusDtLnkUIRelinkActionID,
		kCusDtLnkUIRelinkPopupMenuPath,
		kRelinkMenuPosition+0.1,
		kSDKDefIsNotDynamicMenuFlag,
		
		// Relink menu to be hung under app's links panel popup
		kCusDtLnkUIRelinkActionID,
		kCusDtLnkUIRelinkContextualMenuPath,
		kRelinkMenuPosition+0.1,
		kSDKDefIsNotDynamicMenuFlag,
	}
};

/*
// Action definition.
*/
resource ActionDef (kSDKDefActionResourceID)
{
	{
		kCusDtLnkUIActionComponentBoss, 		// ClassID of boss class that implements the ActionID.
		kCusDtLnkUIAboutActionID,	// ActionID.
		kCusDtLnkUIAboutMenuKey,	// Sub-menu string.
		kHelpMenuActionArea,				// Area name (see ActionDefs.h).
		kNormalAction,					// Type of action (see ActionDefs.h).
		kDisableIfLowMem,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,			// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag, // kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.

		kCusDtLnkUIActionComponentBoss,
		kCusDtLnkUIAddNewDBActionID,
		kCusDtLnkUIAddNewDBMenuItemKey,
		kOtherActionArea,
		kNormalAction,
		kDisableIfLowMem,
		kInvalidInterfaceID,
		kSDKDefInvisibleInKBSCEditorFlag,

		kCusDtLnkUIActionComponentBoss, 
		kCusDtLnkUIPopupAboutThisActionID, 
		kSDKDefAboutThisPlugInMenuKey,	// Key to the name of this action
		kOtherActionArea,
		kNormalAction,
		kDisableIfLowMem,	
		kInvalidInterfaceID,
		kSDKDefInvisibleInKBSCEditorFlag,

		kCusDtLnkUIActionComponentBoss, 
		kCusDtLnkUIPlaceFromCSVActionID, 
		kCusDtLnkUIPlaceFromCSVMenuItemKey,	// Key to the name of this action
		kOtherActionArea,
		kNormalAction,
		kDisableIfLowMem,	
		kInvalidInterfaceID,
		kSDKDefInvisibleInKBSCEditorFlag,

		kCusDtLnkUIActionComponentBoss, 
		kCusDtLnkUIRelinkActionID, 
		kCusDtLnkUIRelinkMenuItemKey,	// Key to the name of this action
		kOtherActionArea,
		kNormalAction,
		kDisableIfNoFrontDocument|kCustomEnabling,	
		kInvalidInterfaceID,
		kSDKDefInvisibleInKBSCEditorFlag,
	}
};


/*
// LocaleIndex
// The LocaleIndex should have indicies that point at your
// localizations for each language system that you are
// localized for.
*/
/*
// String LocaleIndex.
*/
resource LocaleIndex ( kSDKDefStringsResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_enUS, kSDKDefStringsResourceID + index_enUS
		kInDesignJapaneseFS, k_jaJP, kSDKDefStringsResourceID + index_jaJP
		
		kWildFS, k_Wild, kSDKDefStringsResourceID + index_enUS
	}
};

resource LocaleIndex (kSDKDefStringsNoTransResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_Wild, kSDKDefStringsNoTransResourceID + index_enUS
	}
};

resource StringTable (kSDKDefStringsNoTransResourceID + index_enUS)
{
	k_enUS,									// Locale Id
	kEuropeanMacToWinEncodingConverter,		// Character encoding converter
	{
		// No-Translate strings go here:
	}
};

/*
// Panel LocaleIndex.
*/
resource LocaleIndex (kSDKDefPanelResourceID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, 	kSDKDefPanelResourceID + index_enUS,
	}
};

resource LocaleIndex (kCusDtLnkUITreeNodeWidgetRsrcID)
{
	kViewRsrcType,
	{
		kWildFS, k_Wild, kCusDtLnkUITreeNodeWidgetRsrcID + index_enUS
	}
}

/*
// Type definition for the palette-panel widget.
*/
type CusDtLnkUIPalettePanelWidget(kViewRsrcType) : PalettePanelWidget(ClassID = kCusDtLnkUIPalettePanelWidgetBoss) 
{
	CPanelMenuData;
};

type CusDtLnkUITreeViewWidget(kViewRsrcType) : TreeViewWidget(ClassID = kCusDtLnkUITreeViewWidgetBoss) 
{
};

type CusDtLnkUITreeNodeWidget(kViewRsrcType) :  PrimaryResourcePanelWidget(ClassID = kCusDtLnkUITreeNodeWidgetBoss) 
{
};

type CusDtLnkUITreeCViewPanelWidget(kViewRsrcType) : GenericPanelWidget(ClassID = kCusDtLnkUITreeCViewPanelWidgetBoss)
{
};

/*
// PanelList definition.
*/
resource PanelList (kSDKDefPanelResourceID)
{
	{
		// 1st panel in the list
		kSDKDefPanelResourceID,			// Resource ID for this panel (use SDK default rsrc ID)
		kCusDtLnkUIPluginID,				// ID of plug-in that owns this panel
		kNotResizable,
		kCusDtLnkUIPalettePanelWidgetActionID,		// Action ID to show/hide the panel
		kCusDtLnkUIPanelTitleKey,			// Shows up in the Window list.
		"",								// Alternate menu path of the form "Main:Foo" if you want your palette menu item in a second place
		0.0,							// Alternate Menu position Alternate Menu position for determining menu order
		0,0,						// Rsrc ID, Plugin ID for a PNG icon resource to use for this palette
		c_Panel
	}	
};

/*
// PanelView definition.
// The view is not currently localised: therefore, it can reside here.
// However, if you wish to localise it, it is recommended to locate it in one of
// the localised framework resource files (i.e. CusDtLnkUI_enUS.fr etc.).
*/
resource CusDtLnkUIPalettePanelWidget(kSDKDefPanelResourceID + index_enUS)
{
	__FILE__, __LINE__,				// Localization macro		
	kCusDtLnkUIPalettePanelWidgetID,			// WidgetID 
	kPMRsrcID_None,					// RsrcID
	kBindNone,						// Binding (0=none)
	0, 0, 207, 372,					// Frame: left, top, right, bottom.
	kTrue, kTrue,					// Visible, Enabled
	kFalse,							// Erase background
	kInterfacePaletteFill,			// Erase to color
	kFalse,							// Draw dropshadow
	kCusDtLnkUIPanelTitleKey,			// Panel name	
	{		
		ErasablePrimaryResourcePanelWidget
		(
			__FILE__, __LINE__,
			0, kPMRsrcID_None,
			kBindAll,
			Frame(0,22,207,371)	// Frame
			kTrue, kTrue,
			kFalse,							// Erase background
			kInterfacePaletteFill,			// Erase to color
			"",
			{
				CusDtLnkUITreeViewWidget
				(
					kCusDtLnkUITreeViewWidgetID, kPMRsrcID_None,// WidgetId, RsrcId
					kBindAll,
					Frame(0,0,207,180)		// Frame
					kTrue, kTrue,			// Visible, Enabled
					kTrue, 						// EraseBeforeDraw
					kInterfacePaletteFill,	 	// InterfaceColor
					"",
					kFalse,	// Options should be kHideRootNode
					kTrue,		// Use H Scroll bar
					kTrue,		// Use V scroll bar
					20,			// fVScrollButtonIncrement
					20,			// fVThumbScrollIncrement
					20,			// fHScrollButtonIncrement
					20,			// fHThumbScrollIncrement
					2,			// Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
					kFalse,		// Allow children from multiple parents to be selected
					kFalse,		// Allow discontiguous selection
					{
								
					},
				),

				CusDtLnkUITreeCViewPanelWidget
				(
					kCusDtLnkUITreeCustomPanelViewWidgetID,	// WidgetId
					kPMRsrcID_None,					// RsrcId
					kBindNone,
					Frame(1,201,205,345)			// Frame
					kTrue,							// Visible
					kTrue,							// Enabled
					"",
					{
					}
				),

				StaticTextWidget
				(
					kCusDtLnkUITreeTextMessageWidgetID,		// WidgetId (default=0)
					kSysStaticTextPMRsrcId,			// RsrcId
					kBindNone,						// Frame binding
					1, 181, 207, 200,				// Frame: left, top, right, bottom.
					kTrue, kTrue,					// Visible, Enabled
					kAlignLeft, kEllipsizeEnd, kTrue,		// Alignment, ellipsize style, convert ampersands
					"",								// Initial text.
					0								// No associated widget
				),
			}
		),
		
	}

	kCusDtLnkUIInternalPopupMenuNameKey		// Popup menu name (internal)
};

resource CusDtLnkUITreeNodeWidget (kCusDtLnkUITreeNodeWidgetRsrcID + index_enUS)
{
	__FILE__, __LINE__,
	kCusDtLnkUITreeNodeWidgetId, kPMRsrcID_None,	// WidgetId, RsrcId
	kBindLeft, //| kBindRight,					// Frame binding
	Frame(0,0,414,20),						// Frame (left, top, right, bottom)
	kTrue, kTrue,							// Visible, Enabled
	"",										// Panel name
	{
		// Drop down arrow
		TreeExpanderWidget
		(
			kTreeNodeExpanderWidgetID,		// WidgetId
			kTreeBranchCollapsedRsrcID,		// RsrcId for collapsed node icon
			kApplicationRsrcPluginID,		// RsrcPlugin for collapsed node icon
			kBindNone,						// Frame binding
			Frame(2,4,18,18),				// Frame
			kTrue, kTrue,					// Visible, Enabled
			kTreeBranchExpandedRsrcID, 		// RsrcId for expanded node icon
			kApplicationRsrcPluginID,		// RsrcPlugin for expanded node icon
			kTrue,							// Cmd-Click expands/collapses children
			kFalse,							// Scroll to show children when expanded
			kIconNoCentering,			
			kIconRaisedLook,		// Sets the icon look -- (kIconRaisedLook | kIconFlushLook)
			kFalse					// Bool integer sets whether the icon draws a well.
		),
		
		GenericPanelWidget
		(
			kCusDtLnkUITreeElementWidgetId,			// WidgetId
			kPMRsrcID_None,					// RsrcId
			kBindLeft | kBindRight,			// Frame binding
			Frame(19,0,414,18)				// Frame
			kTrue, kTrue,					// Visible, Enabled
			"",
			{
				IconSuiteWidget
				(
					kCusDtLnkUITreeIconWidgetId,		// WidgetId,
					kPMRsrcID_None,
					kBindLeft,					// Frame binding
					Frame(0,0,18,18),			// Frame
					kTrue, kTrue,				// Visible, Enabled
					kIconCentering,		// (kIconNoCentering, kIconHorizontalCentering, kIconVerticalCentering or kIconCentering)
										// Centering value from IconStyleDefs.h
					kIconRaisedLook,		// Sets the icon look -- (kIconRaisedLook | kIconFlushLook)
					kFalse					//  bool, draw Well..	
					0,						// WidgetId for associated control for shortcut focus
				),
				
				InfoStaticTextWidget
				(
					kCusDtLnkUITreeNodeNameWidgetID,		// WidgetId
					kPMRsrcID_None,					// RsrcId
					kBindLeft, // Frame binding
					Frame(19,0,414,18),				// Frame
					kTrue, kTrue,					// Visible, Enabled
					kAlignLeft,						// Alignment
					kDontEllipsize, kTrue,					// Ellipsize style, Convert ampersands
					"",								// Text Control Data	
					0,								// WidgetId for associated control for shortcut focus
					kPaletteWindowSystemScriptFontId, kPaletteWindowSystemScriptFontId, 
				),
		
	
			}
		),
	}
}

/*
// Dialog LocaleIndex.
*/
resource LocaleIndex (kCusDtLnkUIBrowsDialogResourceID)
{
   kViewRsrcType,
	{
		kWildFS,	k_Wild, kCusDtLnkUIBrowsDialogResourceID + index_enUS
	}
};

/*
// Type definition. Note the exotic naming 'DialogBoss' for what is really a widget.
*/
type CusDtLnkUIBrowsDialogBoss(kViewRsrcType) : DialogBoss(ClassID = kCusDtLnkUIBrowsDialogBoss)
{
	WidgetEveInfo;
};

/*
 * Dialog definition for 'Place From CSV...' menu item.
 * Launch using the Plug-Ins menu.
 */
resource CusDtLnkUIBrowsDialogBoss (kCusDtLnkUIBrowsDialogResourceID + index_enUS)
{
	__FILE__, __LINE__,
	kCusDtLnkUIBrowsDialogWidgetID,				// WidgetID
	kPMRsrcID_None,								// RsrcID
	kBindNone,									// Binding
	Frame(0,0,0,0),								// Frame (l,t,r,b) was 488 420
	kTrue, kTrue,								// Visible, Enabled
	kCusDtLnkUIBrowsDialogTitleKey,				// Dialog name
	{		
		// Container to wrap the tree and title fields
		EVEErasablePrimaryResourcePanelWidget
		(
			__FILE__, __LINE__,
			0, 
			kPMRsrcID_None,
			kBindAll,
			Frame(0,0,0,0)							// Frame (l,t,r,b)
			kTrue, kTrue,
			kFalse,									// Erase background
			kInterfacePaletteFill,					// Erase to color
			"",
			{
				// tree which lists database of links
				CusDtLnkUITreeViewWidget
				(
					kCusDtLnkUITreeViewWidgetID, kPMRsrcID_None,// WidgetId, RsrcId
					kBindAll,
					Frame(0,0,360,180)		// Frame
					kTrue, kTrue,			// Visible, Enabled
					kTrue, 						// EraseBeforeDraw
					kInterfacePaletteFill,	 	// InterfaceColor
					"",
					kFalse,		// Options (should use kHideRootNode)
					kTrue,		// Use H Scroll bar
					kTrue,		// Use V scroll bar
					20,			// fVScrollButtonIncrement
					20,			// fVThumbScrollIncrement
					20,			// fHScrollButtonIncrement
					20,			// fHThumbScrollIncrement
					2,			// Items selectable, 0 = No Selection, 1 = Single Selection, 2 = Multiple Selection
					kFalse,		// Allow children from multiple parents to be selected
					kFalse,		// Allow discontiguous selection
					{
								
					},
				),
					
				// title of currently selected link in tree									
				EVEStaticTextWidget							
				(
					kCusDtLnkUITreeTextMessageWidgetID,		// WidgetId (default=0)
					kSysStaticTextPMRsrcId,					// RsrcId
					kBindAll,								// Frame binding
					Frame(0,0,400,0),						// Frame (l,t,r,b)
					kTrue, kTrue,							// Visible, Enabled
					kAlignLeft, kEllipsizeEnd, kTrue,		// Alignment, ellipsize style, convert ampersands
					"",										// Initial text.
					0										// No associated widget
									
					kEVERegularSpaceAfter,
				),
			}
					
			kEVERegularSpaceAfter | kEVEArrangeChildrenInColumn,
		),

		// OK and Cancel buttons wrapped in their own container
		EVEGenericPanelWidget							
		(
			kInvalidWidgetID,							// WidgetId
			0											// RsrcId
			0,			
			kBindNone,									// Frame binding
			Frame(0,0,0,0)								// Frame (l,t,r,b)
			kTrue,										// Visible
			kTrue,										// Enabled
			kEVEAlignLeft | kEVERegularSpaceAfter | kEVEArrangeChildrenInColumn,
					
			{
				EVEDefaultButtonWidget					// OK button
				(
					kOKButtonWidgetID,					// WidgetID 
					kSysButtonPMRsrcId,					// RsrcID
					kBindNone,							// Binding
					Frame(0,0,0,0),						// Frame (l,t,r,b)
					kTrue, kTrue,						// Visible, Enabled
					kSDKDefOKButtonApplicationKey,		// Button text
					kEVELargeSpaceAfter,
				),

				EVECancelButtonWidget					// Cancel button
				(
					kCancelButton_WidgetID,				// WidgetID
					kSysButtonPMRsrcId,					// RsrcID
					kBindNone,							// Binding
					Frame(0,0,0,0),						// Frame (l,t,r,b)
					kTrue, kTrue,						// Visible, Enabled
					kSDKDefCancelButtonApplicationKey,	// Button name
					kFalse,								// Change to Reset on option-click (e.g. Windows: Alt changes Cancel button to Reset)
					kEVELargeSpaceAfter,
				),
						
			}
		),
	},
	
	kEVEArrangeChildrenInRow | kEVELargeMargin,		// Arrangement of dialog children
};

#endif // __ODFRC__

#include "CusDtLnkUI_enUS.fr"
#include "CusDtLnkUI_jaJP.fr"
