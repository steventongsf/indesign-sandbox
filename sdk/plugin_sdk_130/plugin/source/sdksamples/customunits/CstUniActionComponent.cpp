//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/sdksamples/customunits/CstUniActionComponent.cpp $
//  
//  Owner: Adobe Developer Technologies
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "VCPlugInHeaders.h"

// Interface includes:

// General includes:
#include "CActionComponent.h"
#include "CAlert.h"

// Project includes:
#include "CstUniID.h"


/** CstUniActionComponent
	implements the actions that are executed when the plug-in's
	menu items are selected.

	CstUniActionComponent implements IActionComponent based on
	the partial implementation CActionComponent.

	
	@ingroup customunits
*/
class CstUniActionComponent : public CActionComponent
{
	public:
		/**
			Constructor.
			@param boss interface ptr from boss object on which this interface is aggregated.
		*/
		CstUniActionComponent(IPMUnknown* boss);

		/**
			The action component should do the requested action.
			This is where the menu item's action is taken.
			When a menu item is selected, the Menu Manager determines
			which plug-in is responsible for it, and calls its DoAction
			with the ID for the menu item chosen.
			@param ac refers to the current active context, such as the front view or front document
			@param actionID identifies which action this action component should perform
			@param mousePoint contains the global mouse location at time of event causing action (e.g. context menus). kInvalidMousePoint if not relevant.
			@param widget contains the widget that invoked this action. May be nil. e.g. Useful to use as a basis for Utils<IWidgetUtils>()->QueryRelatedWidget(...) to find widgets in a panel after its popup menu is hit.

			*/
		virtual void DoAction(IActiveContext* ac, ActionID actionID, GSysPoint mousePoint, IPMUnknown* widget);
};

/* CREATE_PMINTERFACE
 Binds the C++ implementation class onto its
 ImplementationID making the C++ code callable by the
 application.
*/
CREATE_PMINTERFACE(CstUniActionComponent, kCstUniActionComponentImpl)

/* CstUniActionComponent Constructor
*/
CstUniActionComponent::CstUniActionComponent(IPMUnknown* boss)
: CActionComponent(boss)
{
}

/* DoAction
*/
void CstUniActionComponent::DoAction(IActiveContext* ac, ActionID actionID, GSysPoint mousePoint, IPMUnknown* widget)
{
	switch (actionID.Get())
	{
		case kCstUniAboutActionID:
		{
			CAlert::ModalAlert
			(
			   kCstUniAboutBoxStringKey,			// Alert string
			   kOKString, 							// OK button
			   kNullString, 						// No second button
			   kNullString, 						// No third button
			   1,									// Set OK button to default
			   CAlert::eInformationIcon				// Information icon.
			);
			break;
		}

		default:
		{
			break;
		}
	}
}

//  Generated by Dolly build 16: template "IfPanelMenu".
// End, CstUniActionComponent.cpp.



