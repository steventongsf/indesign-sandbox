//========================================================================================
//  
//  $File: //depot/devtech/14.0/plugin/source/sdksamples/preflightruleui/PreflightRuleUI.fr $
//  
//  Owner: John Doe
//  
//  $Author: pmbuilder $
//  
//  $DateTime: 2018/09/10 00:46:19 $
//  
//  $Revision: #2 $
//  
//  $Change: 1031899 $
//  
//  Copyright 1997-2010 Adobe Systems Incorporated. All rights reserved.
//  
//  NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance 
//  with the terms of the Adobe license agreement accompanying it.  If you have received
//  this file from a source other than Adobe, then your use, modification, or 
//  distribution of it requires the prior written permission of Adobe.
//  
//========================================================================================

#include "VCPlugInHeaders.h"

// General includes:
#include "MenuDef.fh"
#include "ActionDef.fh"
#include "ActionDefs.h"
#include "AdobeMenuPositions.h"
#include "LocaleIndex.h"
#include "PMLocaleIds.h"
#include "StringTable.fh"
#include "ObjectModelTypes.fh"
#include "ShuksanID.h"
#include "ActionID.h"
#include "CommandID.h"
#include "WorkspaceID.h"
#include "WidgetID.h"
#include "BuildNumber.h"
#include "PlugInModel_UIAttributes.h"
#include "PackageAndPreflightID.h"
#include "PackageAndPreflightUIID.h"

#include "InterfaceColorDefines.h"
#include "IControlViewDefs.h"
#include "SysControlIDs.h"
#include "Widgets.fh"	// for PalettePanelWidget or DialogBoss
#include "TreeViewDefs.h"
#include "EveInfo.fh"

// Project includes:
#include "PreflightRuleUIID.h"
#include "PreflightRuleID.h"
#include "GenericID.h"
#include "ShuksanID.h"
#include "TextID.h"
#include "PreflightRuleRezDefs.h"

#ifdef __ODFRC__

/*  Plugin version definition.
*/
resource PluginVersion (kSDKDefPluginVersionResourceID)
{
	kTargetVersion,
	kPreflightRuleUIPluginID,
	kSDKDefPlugInMajorVersionNumber, kSDKDefPlugInMinorVersionNumber,
	kSDKDefHostMajorVersionNumber, kSDKDefHostMinorVersionNumber,
	kPreflightRuleUICurrentMajorFormatNumber, kPreflightRuleUICurrentMinorFormatNumber,
	{ kInDesignProduct, kInCopyProduct},
	{ kWildFS },
	kUIPlugIn,
	kPreflightRuleUIVersion
};

/*  The ExtraPluginInfo resource adds extra information to the Missing Plug-in dialog
	that is popped when a document containing this plug-in's data is opened when
	this plug-in is not present. These strings are not translatable strings
	since they must be available when the plug-in isn't around. They get stored
	in any document that this plug-in contributes data to.
*/
resource ExtraPluginInfo(1)
{
	kPreflightRuleUICompanyValue,			// Company name
	kPreflightRuleUIMissingPluginURLValue,	// URL 
	kPreflightRuleUIMissingPluginAlertValue,	// Missing plug-in alert text
};

/* Boss class definition.
*/
resource ClassDescriptionTable(kSDKDefClassDescriptionTableResourceID)
{{{
	
	/**
	 This boss class supports two interfaces:
	 IActionComponent and IPMPersist.

	 
	 @ingroup preflightruleui.sdk
	*/
	Class
	{
		kPreflightRuleUIActionComponentBoss,
		kInvalidClass,
		{
			/** Handle the actions from the menu. */
			IID_IACTIONCOMPONENT, kPreflightRuleUIActionComponentImpl,
			/** Persist the state of the menu across application instantiation.
			Implementation provided by the API.*/
			IID_IPMPERSIST, kPMPersistImpl
		}
	},

	AddIn
	{
		kPreflightDisallowFontRuleBoss,
		kInvalidClass,
		{
			IID_IPREFLIGHTRULEUI,		kPreflightFontUIImpl,
		}
	}

	AddIn
	{
		kPreflightBlackOverprintRuleBoss,
		kInvalidClass,
		{
			IID_IPREFLIGHTRULEUI,		kPreflightBlackOverprintUIImpl,
		}
	}

	Class
	{
		kPreflightRuleUIDataPanelWidgetBoss,
		kPrimaryResourcePanelWidgetBoss,
		{
            IID_IPREFLIGHTRULEDATA,		kPreflightRuleDataImpl,
		}
	},
	
	Class
	{
		kPreflightRuleUIDataCheckBoxWidgetBoss,
		kCheckBoxWidgetBoss,
		{
			IID_IOBSERVER,		kPreflightCheckBoxObserverImpl,
			IID_IUIFONTSPEC,	kUIFontSpecImpl,
		}
	},
	
}}};

/*  Implementation definition.
*/
resource FactoryList (kSDKDefFactoryListResourceID)
{
	kImplementationIDSpace,
	{
		#include "PreflightRuleUIFactoryList.h"
	}
};


/*  Menu definition.
*/
resource MenuDef (kSDKDefMenuResourceID)
{
	{
		// The About Plug-ins sub-menu item for this plug-in.
		kPreflightRuleUIAboutActionID,			// ActionID (kInvalidActionID for positional entries)
		kPreflightRuleUIAboutMenuPath,			// Menu Path.
		kSDKDefAlphabeticPosition,			// Menu Position.
		kSDKDefIsNotDynamicMenuFlag,		// kSDKDefIsNotDynamicMenuFlag or kSDKDefIsDynamicMenuFlag


	}
};

/* Action definition.
*/
resource ActionDef (kSDKDefActionResourceID)
{
	{
		kPreflightRuleUIActionComponentBoss, 		// ClassID of boss class that implements the ActionID.
		kPreflightRuleUIAboutActionID,	// ActionID.
		kPreflightRuleUIAboutMenuKey,	// Sub-menu string.
		kOtherActionArea,				// Area name (see ActionDefs.h).
		kNormalAction,					// Type of action (see ActionDefs.h).
		kDisableIfLowMem,				// Enabling type (see ActionDefs.h).
		kInvalidInterfaceID,			// Selection InterfaceID this action cares about or kInvalidInterfaceID.
		kSDKDefInvisibleInKBSCEditorFlag, // kSDKDefVisibleInKBSCEditorFlag or kSDKDefInvisibleInKBSCEditorFlag.



	}
};


/*  LocaleIndex
	The LocaleIndex should have indicies that point at your
	localizations for each language system that you are localized for.
*/
/*  String LocaleIndex.
*/
resource LocaleIndex ( kSDKDefStringsResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_enUS, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_enGB, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_deDE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_frFR, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_esES, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_ptBR, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_svSE, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_daDK, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_nlNL, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_itIT, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_nbNO, kSDKDefStringsResourceID + index_enUS
		kWildFS, k_fiFI, kSDKDefStringsResourceID + index_enUS
		kInDesignJapaneseFS, k_jaJP, kSDKDefStringsResourceID + index_jaJP
	}
};

resource LocaleIndex (kSDKDefStringsNoTransResourceID)
{
	kStringTableRsrcType,
	{
		kWildFS, k_Wild, kSDKDefStringsNoTransResourceID + index_enUS
	}
};

resource StringTable (kSDKDefStringsNoTransResourceID + index_enUS)
{
	k_enUS,									// Locale Id
	kEuropeanMacToWinEncodingConverter,		// Character encoding converter
	{
		// No-Translate strings go here:

	}
};

resource LocaleIndex (kPreflightRuleUIDataPanelRsrcID)
{
	kViewRsrcType,
	{
		kWildFS,	k_Wild, kPreflightRuleUIDataPanelRsrcID + index_enUS
	}
};

type PreflightRuleUIDataPanelWidget(kViewRsrcType) : PrimaryResourcePanelWidget(ClassID = kPreflightRuleUIDataPanelWidgetBoss) 
{
};

type PreflightRuleUIDataCheckBoxWidget (kViewRsrcType) : EVECheckBoxWidget (ClassID = kPreflightRuleUIDataCheckBoxWidgetBoss)
{
	UIFontSpec;
};

resource PreflightRuleUIDataPanelWidget(kPreflightRuleUIDataPanelRsrcID + index_enUS)
{
	__FILE__, __LINE__,
	kPreflightRuleUIDataPanelWidgetID, kPMRsrcID_None,	// WidgetId, RsrcId
	kBindNone,			// Frame binding
	Frame(0, 0, 207, 95),			// Frame
	kTrue, kTrue,					// Visible, Enabled
	"",								// Panel name
	{
		EVEGenericPanelWidget
		(
			kInvalidWidgetID,
			0, 0,
			kBindNone,
			Frame(0, 0, 207, 95)
			kTrue,
			kTrue,
			kEVEAlignFill|kEVERegularSpaceAfter|kEVEDontArrangeChildren,
			{
				PreflightRuleUIDataCheckBoxWidget   //Check Box
				(
					kPreflightRuleUIDataWidgetID1, kSysCheckBoxPMRsrcId,	// WidgetId, RsrcId
					kBindNone,				// Frame binding
					Frame(0, 0, 90, 17)	// Frame
					kTrue, kTrue,			// Visible, Enabled
					kAlignLeft,				// alignment
					kPreflightFontName1,			// control label
					kEVEChildRegularSpaceAfter,
					kPaletteWindowSystemScriptFontId,
					kPaletteWindowSystemScriptFontId,
				),

				PreflightRuleUIDataCheckBoxWidget   //Check Box
				(
					kPreflightRuleUIDataWidgetID2, kSysCheckBoxPMRsrcId,	// WidgetId, RsrcId
					kBindNone,				// Frame binding
					Frame(115, 0, 200, 17)	// Frame(0, 20, 19, 37)
					kTrue, kTrue,			// Visible, Enabled
					kAlignLeft,				// alignment
					kPreflightFontName2,			// control label
					kEVEChildRegularSpaceAfter,
					kPaletteWindowSystemScriptFontId,
					kPaletteWindowSystemScriptFontId,
				),

				PreflightRuleUIDataCheckBoxWidget   //Check Box
				(
					kPreflightRuleUIDataWidgetID3, kSysCheckBoxPMRsrcId,	// WidgetId, RsrcId
					kBindNone,				// Frame binding
					Frame(0, 25, 90, 42)	// Frame(0, 40, 19, 57)
					kTrue, kTrue,			// Visible, Enabled
					kAlignLeft,				// alignment
					kPreflightFontName3,			// control label
					kEVEChildRegularSpaceAfter,
					kPaletteWindowSystemScriptFontId,
					kPaletteWindowSystemScriptFontId,
				),

				PreflightRuleUIDataCheckBoxWidget   //Check Box
				(
					kPreflightRuleUIDataWidgetID4, kSysCheckBoxPMRsrcId,	// WidgetId, RsrcId
					kBindNone,				// Frame binding
					Frame(115, 25, 200, 42)	// Frame(0, 60, 19, 77)
					kTrue, kTrue,			// Visible, Enabled
					kAlignLeft,				// alignment
					kPreflightFontName4,			// control label
					kEVEChildRegularSpaceAfter,
					kPaletteWindowSystemScriptFontId,
					kPaletteWindowSystemScriptFontId,
				),
			}
		)
	}	
};

#endif // __ODFRC__

#include "PreflightRuleUI_enUS.fr"
#include "PreflightRuleUI_jaJP.fr"

//  Code generated by DollyXs code generator
